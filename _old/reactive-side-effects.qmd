---
title: "Reactive Side Effects"
code-annotations: hover
---

```{python}
# | echo: false
import os

os.chdir("..")
from helpers import problem_tabs_core, problem_tabs_express
, include_shiny_folder, Quiz, multiple_choice_app

```

In the last section we learned about reactivity and reactive caluaitons. 
In general your default behaviour when developing Shiny apps is to not worry about when your calculations will be run in response to a users actions.
Most of the time Shiny will infer the optimal render behaviour when you call inputs or reactive calculations in your code.
There are, however, cases where you _do_ want to intervene and tell Shiny when a piece of code should run, and the `@reactive.Effect` and `@reactive.event` decorators allow you to do this. 

Consider this application which opens and closes a model.
There's an input button which the user can click which opens a modal window, and clicking outside of that window closes it.
How would you accomplish this behaviour using the Shiny tools you know so far?

```{python}
# | echo: false
# | output: asis

include_shiny_folder(
    "apps/examples/3.0-modal", components="viewer", viewer_height="400"
)
```

This interaction is hard to incorporate into a basic reactive framework because the button doesn't really have _value_ in the same way that other inputs do. 
When you change a numeric input or a slider, you're modifying the value and Shiny can invalidate things based on that change. 
When the user clicks the button in this app, we are usually intersted in the _side effect_ of that action. 
We're not doing something with the value of the button, we just want the action to trigger some other behaviour. 

To implement behaviour like this we define a function which contains the effect logic, and use the `@reactive.Effect` and `@reactive.event` to identify it as an effect.
The `@reactive.Effect` decorator tells Shiny that the function is called for its side effect and that it shouldn't be called directly. 
The best way to indentify which inputs should trigger the effect is by identifying it with `@reactive.event`.
Unlike output functions or reactive calculations, the name of the function does not matter.
You can either use an informative name or `def _():` to name the function. 

::: callout-warning
Since we're not using the value of `input.show` in `@reactive.event` we refer to the object (`input.show`) rather than calling it as we would in a reactive (`input.show()`). 
:::

```{.python}
@reactive.Effect                                  # <1>
@reactive.event(input.show)                       # <2>
def toggle_modal():
    m = ui.modal(
        "This is a somewhat important message.",
        title="Click outside the modal to close",
        easy_close=True,
        footer=None,
    )
    ui.modal_show(m)
```
1. Identify that this is a reactive effect called for its side effects
2. Define which inputs should trigger the effect. 

The distinction between values and side effects is crucial for using Shiny effectively because it determines which pattern you should use. 
You should use `reactive.Calc` when you want the _value_ of a function, and `reactive.Effect` when you want a _side effect_.
New Shiny developers often make the mistake of using one of these patterns for their entire application, and create needless complexity in their application. 
It's a mistake to use `reactive.Effect` when you're after the value of a function, and it's a mistake to try to use `reactive.Calc` when you want a side effect.
This short quiz can help develop an intuition about this distinction:

### Quiz 3.0: Values and side effects

```{python}
# | echo: false
# | output: asis

from helpers import multiple_choice_app, Quiz

questions = Quiz(
    {
        "Writing a CSV": {
            "choices": ["value", "side effect"],
            "answer": "side effect",
        },
        "Querying a database": {
            "choices": ["value", "side effect"],
            "answer": "value",
        },
        "Adding two numbers": {
            "choices": ["value", "side effect"],
            "answer": "value",
        },
        "A function which prints to the console": {
            "choices": ["value", "side effect"],
            "answer": "side effect",
        },
        "Fetching the current temperature from an API": {
            "choices": ["value", "side effect"],
            "answer": "value",
        },
        "A function which sorts a list in place": {
            "choices": ["value", "side effect"],
            "answer": "side effect",
        },
        "Getting a model score for a set of inputs": {
            "choices": ["value", "side effect"],
            "answer": "value",
        },
        "Deploying a model to a hosting service": {
            "choices": ["value", "side effect"],
            "answer": "side effect",
        },
    }
)

multiple_choice_app(questions)
```

# Exercise

```{python}
# | output: asis
# | echo: false

problem_tabs_core("3-reactive-effects/3.1-update-slider")
```