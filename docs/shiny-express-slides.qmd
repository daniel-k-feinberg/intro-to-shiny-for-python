---
title: "Getting started with Shiny Express"
title-slide-attributes: 
  data-background-image:  images/shiny-for-python-seattle.jpg
  data-background-position: bottom left
  data-background-size: cover
format:
  positconfslides-revealjs:
    incremental: false
    chalkboard: true
    slide-number: c/t
    code-copy: true
    center-title-slide: false
    code-link: true
    highlight-style: a11y
    width: "1600"
    height: "900"
    css: "styles.css"
    filters:
      - positconfslides
      - reveal-auto-agenda
    auto-agenda:
      heading: Agenda
---

```{python}
# | echo: false
import os
import sys
exercises_path = "./exercises"
if exercises_path not in sys.path:
    sys.path.append(exercises_path)

from helpers import include_shiny_folder

bgcolor = "whitesmoke"
```

## Exercises

::: {.callout-note}

-   This workshop is exercise based
-   All of the exercises and slides are running live on the [website](https://posit-conf-2024.github.io/intro-to-shiny-for-python/)
-   The exercise files are available for download from [github](https://github.com/posit-conf-2024/intro-to-shiny-for-python/tree/main/docs/exercises)

:::

## Today's goal

Learn how to build reactive web apps with Shiny and Python, from the simple to the mission critical.

<!-- 
## Who we are

:::: {.columns}

::: {.column width="50%"}
![Andrie de Vries](../images/andrie.png){width=80%}  
Andrie de Vries  
Director of Product Strategy, Posit
:::

::: {.column width="50%"}
![Garrett Grolemund](../images/garrett.png){width=80%}  
Garrett Grolemund  
Director of Learning, Posit
:::

::::
-->

## Who you are {background-color=`{python} bgcolor`}
- Name
- What you do
- Have you used:
    + Python?
    + Shiny (for R or Python)?
    + HTML, CSS, JavaScript?

<!--
## Today's Schedule

|                 |               |
|-----------------|---------------|
| Hello Shiny     |  9:00 - 10:30 |
| Coffee break    | 10:30 - 11:00 |
| Reactivity      | 11:00 - 12:30 |
| Lunch           | 12:30 - 1:30  |
| User Interfaces |  1:30 - 3:00  |
| Coffee break    |  3:00 - 3:30  |
| Best Practices  |  3:30 - 5:00  |

: {.striped}
-->

# Anatomy of an App

## Goals

1.  Understand the "whole game"/ big picture

2.  Identify the resources that will support you

3.  Develop comfort with debugging

## What is a Shiny app? {background-color=`{python} bgcolor`}

:::: {.columns}

::: {.column width="50%"}

1. Pair up
2. Run the app
3. Describe what you see
4. Note one point of interest
:::

::: {.column width="50%"}

1. [Model Scoring](https://gallery.shinyapps.io/template-model-scoring/) ([code](https://github.com/posit-dev/py-shiny-templates/tree/main/model-scoring))  
1. [Restaurant tips dashboard](https://gallery.shinyapps.io/template-dashboard-tips1/) ([code](https://github.com/posit-dev/py-shiny-templates/tree/main/dashboard-tips))  
1. [Database Explorer](https://shiny.posit.co/py/templates/database-explorer/) ([code](https://github.com/posit-dev/py-shiny-templates/tree/main/database-explorer))  
1. [Streaming Database updates](https://shiny.posit.co/py/templates/monitor-database/) ([code](https://github.com/posit-dev/py-shiny-templates/tree/main/monitor-database))  
1. [Location Distance Calculator](https://gallery.shinyapps.io/template-map-distance/) ([code](https://github.com/posit-dev/py-shiny-templates/tree/main/map-distance))  
1. [Survey form](https://shiny.posit.co/py/templates/survey/) ([code](https://github.com/posit-dev/py-shiny-templates/tree/main/survey))  
1. [Shiny Wordle](https://shinylive.io/py/app/#wordle) ([code](https://shinylive.io/py/editor/#wordle))  

:::

::::


## What is a Shiny app?

Each Shiny app involves:

1. A web page
2. A computer that watches the web page and responds to user events on that page  

![](../images/app-architecture.001.png)

## What is a Shiny app?

Each Shiny app involves:

1. A web page
2. A computer that watches the web page and responds to user events on that page    

![](../images/app-architecture.002.png)

## What is a Shiny app?

Each Shiny app involves:

1. A web page
2. A computer that watches the web page and responds to user events on that page    

![](../images/app-architecture.003.png)

## Components 

:::: {.columns}

::: {.column width="40%"}
Each Shiny app consists of:

1. Inputs
:::

::: {.column width="60%"}

![](../images/app-components.001.png)
:::

::::

## Components 

:::: {.columns}

::: {.column width="40%"}
Each Shiny app consists of:

1. Inputs
2. Outputs
:::

::: {.column width="60%"}

![](../images/app-components.002.png)
:::

::::

## Components 

:::: {.columns}

::: {.column width="40%"}
Each Shiny app consists of:

1. Inputs
2. Outputs
3. Instructions on how to build outputs from inputs
:::

::: {.column width="60%"}

![](../images/app-components.003.png)
:::

::::

## Reactivity 

:::: {.columns}

::: {.column width="40%"}
When an input changes, Shiny reacts by rebuilding just the outputs that depend on it.
:::

::: {.column width="60%"}

![](../images/app-components.003.png)
:::

::::

## Spreadsheet Analogy

![](../gifs/spreadsheets.gif)

1. Inputs
2. Outputs
3. Instructions on how to build outputs from inputs

## Spreadsheet Analogy

![](../gifs/spreadsheets-2.gif)

Shiny only updates:

1. When an input changes
2. The parts of the app that depend on the input

## Key features of reactivity

-   Easy enough to use for prototypes
-   Efficient enough to handle complexity
-   Scales to build production quality apps

## Why Shiny for Python?

Shiny lets you quickly create reactive web apps without worrying about:

- cache
- state
- callbacks 
â€” or even HTML, CSS, and JavaScript

And, these apps can scale from prototype to production-ready.

## Quiz {background-color=`{python} bgcolor`}

![](../images/app-components.004.png)

## Quiz {background-color=`{python} bgcolor`}

![](../images/app-components.005.png)

## Quiz {background-color=`{python} bgcolor`}

![](../images/app-components.006.png)

# Your first App

## Your turn

{{< yourturn 'express-101-run-app' >}}

## Run an App

Shiny for Python apps exist as ...Python files. To build an app from the file run:  
\  
\    
```python
shiny run app.py
```
\ 
\   
where `app.py` is the name of your file.

##

Today we will do that in an exercise container.

![](../images/exercise-button.png)

##

But you can run this at any command line.

![](../images/vscode-command-line.png)

## 

Or use the VS Code Shiny extension, for a Run App button in VS Code.

![](../images/vscode-button.png)






## Inputs using shiny express

```{.python filename="app.py" code-line-numbers="3-4"}
from shiny.express import input, render, ui

# UI section
ui.input_slider(id = "n", label = "N", min = 0, max = 100, value = 20)

## Server section
@render.text
def txt():
    return f"2 * n is {input.n() * 2}"
```

<br />


```{shinylive-python}
#| standalone: true
#| viewerHeight: 150

from shiny.express import input, render, ui

# UI section
ui.input_slider("n", "N", 0, 100, 20)

## Server section
@render.text
def txt():
    return f"2 * n is {input.n() * 2}"
```

## Server section using shiny express

``` {.python filename="app.py" code-line-numbers="6-9"}
from shiny.express import input, render, ui

# UI section
ui.input_slider(id = "n", label = "N", min = 0, max = 100, value = 20)

## Server section
@render.text
def txt():
    return f"2 * n is {input.n() * 2}"
```

<br />

```{shinylive-python}
#| standalone: true
#| viewerHeight: 150

from shiny.express import input, render, ui

# UI section
ui.input_slider("n", "N", 0, 100, 20)

## Server section
@render.text
def txt():
    return f"2 * n is {input.n() * 2}"
```

## Refer to inputs

Your render function can refer to the input by calling it like a function.

In this case, the `input_slider` has the name `"n"`, so you refer to it as `input.n()`.


```{.python filename="app.py" code-line-numbers="9"}
from shiny.express import input, render, ui

# UI section
ui.input_slider(id = "n", label = "N", min = 0, max = 100, value = 20)

## Server section
@render.text
def txt():
    return f"2 * n is {input.n() * 2}"
```

<br />

```{shinylive-python}
#| standalone: true
#| viewerHeight: 150

from shiny.express import input, render, ui

# UI section
ui.input_slider("n", "N", 0, 100, 20)

## Server section
@render.text
def txt():
    return f"2 * n is {input.n() * 2}"
```

## UI functions

-   The `ui` submodule contains functions to create UI elements
-   Inputs start with `ui.input_*()` and take an `id` and options
-   Other functions like `ui.h1()` or `ui.p()` add static HTML to the app
-   We'll get to layout functions in Session 3

<https://shiny.posit.co/py/api/express/express.ui.input_select.html>

## Inputs component gallery

![](images/input-component-gallery.png)

<https://shiny.posit.co/py/components/>


## Render functions for outputs

The render functions define the outputs of the app.

-   Outputs start with `render_*()` and usually just take an id

<https://shiny.posit.co/py/api/express/express.render.plot.html>


## Outputs component gallery

![](images/output-component-gallery.png)

<https://shiny.posit.co/py/components/>


## Your turn

{{< yourturn 'express-102-data-frame' >}}


# Rendering functions on the server side

## Server function

-   Every Shiny app needs a `server` function
-   The server function executes for each user session
-   This function contains **rendering functions** which define how to turn inputs into outputs

## Rendering functions

``` python
def server(input, output, session):
    @output
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"
```

-   Functions are defined inside the main `server` function
-   They need to be **decorated** with `@output` and `@render.*` in that order
-   The function **name** should match the output id
-   The return value is sent to the Shiny UI

## Decorators are just functions

``` python
    @output
    @render.plot(alt="A body mass plot of penguins")
    def mass_plot():
        df = sample_data(penguins.copy(), input.sample())
        df = df.loc[df["body_mass"] < input.mass()]
        return dist_plot(df)
```

-   Decorators are functions which take other functions
-   Shiny uses them to identify reactive functions
-   They can take arguments

## Simple app example

``` {.python code-line-numbers="5,10-13"}
from shiny import Inputs, Outputs, Session, App, render, ui

app_ui = ui.page_fluid(
    ui.input_slider("n", "N", 0, 100, 20),
    ui.output_text_verbatim("txt"),
)

def server(input, output, session):
    @output
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"

app = App(app_ui, server)
```

## Common problems

-   An output doesn't render
-   An output doesn't update when an input changes
-   There's some weird error

## Your turn

{{< yourturn 'express-103-debug' >}}


# Making the link

## Connecting inputs to outputs

``` {.python code-line-numbers="5"}
def server(input: Inputs, output: Outputs, session: Session):
    @output
    @render.text
    def txt():
        return f"n*2 is {input.n() * 2}"
```

-   Inputs are read by calling them like a function: `input.n()`, not `input.n`
-   Referring to an input creates a reactive link between that input and the rendering function
-   When the input changes, the rendering function will re-execute
-   You can use multiple inputs in the same rendering function

## Your turn

{{< yourturn 'express-104-filter' >}}


## Your turn

{{< yourturn 'express-105-connect-filter' >}}


## Your turn

{{< yourturn 'express-106-debug' >}}


## Your turn

{{< yourturn 'express-107-debug' >}}


# Recap

## Summary

Most Shiny app development consists of variations of these three things:

1.  Add UI elements
2.  Add rendering functions
3.  Connect inputs and outputs

## Your turn

{{< yourturn 'express-108-plot' >}}


# left over

## How this session works

-   This session is going to be exercise based
-   All of the exercises and slides are running live on the [website](https://posit-conf-2024.github.io/intro-to-shiny-for-python/)
-   You can do them on the website or open the apps in the `apps/core` folder
-   If you need help, put a red sticker on your laptop; when you're done, put up a green sticker