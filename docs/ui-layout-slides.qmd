---
title: "UI Layout"
title-slide-attributes: 
  data-background-image:  images/shiny-for-python-seattle.jpg
  data-background-position: bottom left
  data-background-size: cover
format:
  positconfslides-revealjs: 
    incremental: false
    chalkboard: true
    slide-number: c/t
    code-copy: true
    center-title-slide: false
    code-link: true
    highlight-style: a11y
    width: "1600"
    height: "900"
    css: "styles.css"
    filters:
      - positconfslides
      - reveal-auto-agenda
    auto-agenda:
      heading: Agenda
---

```{python}
# | echo: false
import os
import sys
exercises_path = "./exercises"
if exercises_path not in sys.path:
    sys.path.append(exercises_path)
from helpers import include_shiny_folder
```

# Introduction

## Goals

- So far we've learned:
    - How to build an app
    - How Shiny renders things
- This session is all about how they look
- We're going to cover a lot of UI elements quickly
    - Just know that these exist
    - Don't worry too much about remembering how they work

## Why care about UI design?
- It's what your stakeholders care about!
- Good UI design simplifies your application code 
- Intuitive UIs mean fewer questions 

## Where we're headed

{{< yourview '303-conditional-panel' >}}


# Anatomy of Shiny UI

## Anatomy of Shiny UI

:::: {.columns}
::: column
```{.python}
app_ui = ui.page_fluid(
    ui.panel_title("Hello Penguins!"),
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("mass", "Mass"
            ),
            ui.input_action_button("reset", "Reset Slider"),
        ),
        ui.panel_main(
            ui.output_data_frame("table"),
        ),
    ),
)
```
:::
::: column
- The UI is separate from the server
- UI is made up of pure functions
    - You can break them into objects
    - You can create them with functions
- Opinionated
    - Your inputs get labels
    - Reasonable look and feel
- Customizable 
    - Everything can be styled with CSS
    - If you know JavaScript, you can use JavaScript
:::
::::

## Some nomenclature

- **Container functions**: organize **child** elements
- **Element functions**: generate a UI object like input and outputs
- **Child**: elements contained by a container function
- **Parent**: the container one level up from a particular element or container

## Element functions

```{.python code-line-numbers="2,5,7,10"}
app_ui = ui.page_fluid(
    ui.panel_title("Hello Penguins!"),
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("mass", "Mass"
            ),
            ui.input_action_button("reset", "Reset Slider"),
        ),
        ui.panel_main(
            ui.output_data_frame("table"),
        ),
    ),
)
```

## Container functions

```{.python code-line-numbers="1,3,4,9"}
app_ui = ui.page_fluid(
    ui.panel_title("Hello Penguins!"),
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("mass", "Mass"
            ),
            ui.input_action_button("reset", "Reset Slider"),
        ),
        ui.panel_main(
            ui.output_data_frame("table"),
        ),
    ),
)
```


## Container functions
- Some layout functions take any child elements and lay them out in order
    - `ui.page_fluid`
    - `ui.panel_sidebar`
    - `ui.panel_main`
- Some, like `layout_sidebar`, take specific children
    - `panel_sidebar` defines the sidebar
    - `panel_main` defines the main panel

# Navsets

## Navsets
- It's common to put apps in tabs
- We have a `navset_tab` function which organizes `ui.nav` containers into tabs
- `ui.nav` is itself a container and allows you lay out the things on the tab

## Navsets
::: {.nonincremental}
- It's common to put apps in tabs
- We have a set of `navset` functions which organize `ui.nav` containers in tabs
- `ui.nav` is itself a container and allows you lay out the things on the tab
:::
```{.python}
from shiny.express import ui

with ui.navset_tab():
    with ui.nav_panel( "Panel 1"):
        ui.input_slider("slider", "Slider", 0, 100, 20)
    with ui.nav_panel("Panel 2"):
        ui.input_action_button("button", "Button A")
    with ui.nav_panel("Panel 3"):
        ui.input_action_button("button2", "Button B")
```

## Navset example

{{< yourview 'express-300-navset' >}}



## Your turn

{{< yourturn 'express-306-navset' >}}


# Cards

## Cards
- Cards are just small boxes which contain other elements
- Useful for grouping inputs and outputs
- "Dashboards" are just web apps in boxes
- Called with `ui.card`
- Cards can take `ui.card_header` and `ui.card_footer`

## Cards

```{.python code-line-numbers="4-8"}
import shiny.experimental as x

app_ui = ui.page_fluid(
    ui.card(
        ui.card_header("Slider card"),
        ui.input_slider("n", "N", 0, 100, 20),
        ui.output_text_verbatim("txt"),
    )
)
```

## Cards example

{{< yourview 'express-301-cards' >}}



## Your turn


{{< yourturn 'express-302-cards' >}}


# Rows and columns

## Rows and columns
- Sidebars, navsets and cards are all special purpose containers
- What if you want to customize your layout more generally?
- What about?
    - Different screen sizes?
    - Mobile browsers? 
    - Different zoom levels?
    - Nested UI containers?
- What we need is a responsive way to specify the size of things
- Enter the bootstrap grid

## Bootstap grid
- Divide the screen into rows and columns 
- Row height expands to fit its children 
- Column width is relative to its parent 

## Bootstrap grid
![](images/bootstrap_image.png)

## Rows
![](images/bootstrap_image.png)

- The shiny `ui.row` container breaks your app into rows
- Rows always contain `ui.column` 

## Columns 
![](images/bootstrap_image.png)

- Imagine breaking up the parent container into 12 vertical sections
- Each column gets an integer **width** from 1-12 
- This defines how much of the parent the column occupies
- Reacts to screen size
- Why 12?

## Rows and columns

```{.python}
ui.row(
        ui.column(
            6,
            ui.output_text("txt"),
        ),
        ui.column(
            6,
            ui.output_plot("my_plot"),
            ),
        ),
    ),
```
