{"title":"Getting started with Shiny express","markdown":{"yaml":{"title":"Getting started with Shiny express","title-slide-attributes":{"data-background-image":"images/shiny-for-python-seattle.jpg","data-background-position":"bottom left","data-background-size":"cover"},"format":{"positconfslides-revealjs":{"incremental":false,"chalkboard":true,"slide-number":"c/t","code-copy":true,"center-title-slide":false,"code-link":true,"highlight-style":"a11y","width":"1600","height":"900","css":"styles.css","filters":["positconfslides","reveal-auto-agenda"],"auto-agenda":{"heading":"Agenda"}}}},"headingText":"| echo: false","containsRefs":false,"markdown":"\n\n```{python}\nimport os\nimport sys\nexercises_path = \"./exercises\"\nif exercises_path not in sys.path:\n    sys.path.append(exercises_path)\n\nfrom helpers import include_shiny_folder\n```\n\n# Getting started\n\n\n## Goals of Session 1\n\n1.  Understand the mechanics of a Shiny app (what to do, not why you do it)\n\n2.  Develop comfort with failure and debugging\n\n3.  You know where to go for help\n\n## Why Shiny?\n\nIntroduce the end state / whole game / bigger picture: web page with a server. \n\nThe server watches the web page and responds to user events on that page.\n\nWe need to tell the compute what to do when the user clicks.\n\n\n## How this session works\n\n-   This session is going to be exercise based\n-   All of the exercises and slides are running live on the [website](https://posit-conf-2024.github.io/intro-to-shiny-for-python/)\n-   You can do them on the website or open the apps in the `apps/core` folder\n-   If you need help, put a red sticker on your laptop; when you're done, put up a green sticker\n\n## Your turn\n\n{{< yourturn 'express-101-hello-world' >}}\n\n\n# Hello Shiny\n\n## What is a Shiny app?\n\n```{python}\n# | echo: false\n# | output: asis\n\ninclude_shiny_folder(\n    \"apps/000-penguins\", components=\"viewer\", viewer_height=700\n)\n```\n\n## Key features of Shiny\n\n-   Easy to develop\n-   Extensible\n-   Efficient\n\n## Why Shiny for Python?\n\nShiny is great because it lets you quickly create web apps without worrying about maintaining cache, managing state, and callbacks â€” or even HTML, CSS, and JavaScript.\n\n-   Shiny is designed to take you from prototype to production\n-   Easy enough to use for prototypes\n-   Efficient enough to handle complexity\n-   Everything you need to build production quality apps\n-   You don't need to throw away your Shiny apps\n\n# Anatomy of a Shiny App\n\n## You need three things\n\nTo make a Shiny app work you need to do three things:\n\n1.  Create a **UI section** that describes inputs and outputs\n\n    - Can contain text, plots, buttons, sliders, etc.\n\n2. Create a **server section**\n\n    - Contains your application logic\n    - In particular, it contains **rendering functions** that turn inputs into outputs\n\n3.  Link the server section and UI section\n\n    - by referring to the inputs in the server section\n\n\n## Inputs using shiny express\n\n```{.python filename=\"app.py\" code-line-numbers=\"3-4\"}\nfrom shiny.express import input, render, ui\n\n# UI section\nui.input_slider(id = \"n\", label = \"N\", min = 0, max = 100, value = 20)\n\n## Server section\n@render.text\ndef txt():\n    return f\"2 * n is {input.n() * 2}\"\n```\n\n<br />\n\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 150\n\nfrom shiny.express import input, render, ui\n\n# UI section\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n## Server section\n@render.text\ndef txt():\n    return f\"2 * n is {input.n() * 2}\"\n```\n\n## Server section using shiny express\n\n``` {.python filename=\"app.py\" code-line-numbers=\"6-9\"}\nfrom shiny.express import input, render, ui\n\n# UI section\nui.input_slider(id = \"n\", label = \"N\", min = 0, max = 100, value = 20)\n\n## Server section\n@render.text\ndef txt():\n    return f\"2 * n is {input.n() * 2}\"\n```\n\n<br />\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 150\n\nfrom shiny.express import input, render, ui\n\n# UI section\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n## Server section\n@render.text\ndef txt():\n    return f\"2 * n is {input.n() * 2}\"\n```\n\n## Refer to inputs\n\nYour render function can refer to the input by calling it like a function.\n\nIn this case, the `input_slider` has the name `\"n\"`, so you refer to it as `input.n()`.\n\n\n```{.python filename=\"app.py\" code-line-numbers=\"9\"}\nfrom shiny.express import input, render, ui\n\n# UI section\nui.input_slider(id = \"n\", label = \"N\", min = 0, max = 100, value = 20)\n\n## Server section\n@render.text\ndef txt():\n    return f\"2 * n is {input.n() * 2}\"\n```\n\n<br />\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 150\n\nfrom shiny.express import input, render, ui\n\n# UI section\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n## Server section\n@render.text\ndef txt():\n    return f\"2 * n is {input.n() * 2}\"\n```\n\n## UI functions\n\n-   The `ui` submodule contains functions to create UI elements\n-   Inputs start with `ui.input_*()` and take an `id` and options\n-   Other functions like `ui.h1()` or `ui.p()` add static HTML to the app\n-   We'll get to layout functions in Session 3\n\n<https://shiny.posit.co/py/api/express/express.ui.input_select.html>\n\n## Inputs component gallery\n\n![](images/input-component-gallery.png)\n\n<https://shiny.posit.co/py/components/>\n\n\n## Render functions for outputs\n\nThe render functions define the outputs of the app.\n\n-   Outputs start with `render_*()` and usually just take an id\n\n<https://shiny.posit.co/py/api/express/express.render.plot.html>\n\n\n## Outputs component gallery\n\n![](images/output-component-gallery.png)\n\n<https://shiny.posit.co/py/components/>\n\n\n## Your turn\n\n{{< yourturn 'express-102-data-frame' >}}\n\n\n# Rendering functions on the server side\n\n## Server function\n\n-   Every Shiny app needs a `server` function\n-   The server function executes for each user session\n-   This function contains **rendering functions** which define how to turn inputs into outputs\n\n## Rendering functions\n\n``` python\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n```\n\n-   Functions are defined inside the main `server` function\n-   They need to be **decorated** with `@output` and `@render.*` in that order\n-   The function **name** should match the output id\n-   The return value is sent to the Shiny UI\n\n## Decorators are just functions\n\n``` python\n    @output\n    @render.plot(alt=\"A body mass plot of penguins\")\n    def mass_plot():\n        df = sample_data(penguins.copy(), input.sample())\n        df = df.loc[df[\"body_mass\"] < input.mass()]\n        return dist_plot(df)\n```\n\n-   Decorators are functions which take other functions\n-   Shiny uses them to identify reactive functions\n-   They can take arguments\n\n## Simple app example\n\n``` {.python code-line-numbers=\"5,10-13\"}\nfrom shiny import Inputs, Outputs, Session, App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 20),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)\n```\n\n## Common problems\n\n-   An output doesn't render\n-   An output doesn't update when an input changes\n-   There's some weird error\n\n## Your turn\n\n{{< yourturn 'express-103-debug' >}}\n\n\n# Making the link\n\n## Connecting inputs to outputs\n\n``` {.python code-line-numbers=\"5\"}\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n```\n\n-   Inputs are read by calling them like a function: `input.n()`, not `input.n`\n-   Referring to an input creates a reactive link between that input and the rendering function\n-   When the input changes, the rendering function will re-execute\n-   You can use multiple inputs in the same rendering function\n\n## Your turn\n\n{{< yourturn 'express-104-filter' >}}\n\n\n## Your turn\n\n{{< yourturn 'express-105-connect-filter' >}}\n\n\n## Your turn\n\n{{< yourturn 'express-106-debug' >}}\n\n\n## Your turn\n\n{{< yourturn 'express-107-debug' >}}\n\n\n# Recap\n\n## Summary\n\nMost Shiny app development consists of variations of these three things:\n\n1.  Add UI elements\n2.  Add rendering functions\n3.  Connect inputs and outputs\n\n## Your turn\n\n{{< yourturn 'express-108-plot' >}}\n\n","srcMarkdownNoYaml":"\n\n```{python}\n# | echo: false\nimport os\nimport sys\nexercises_path = \"./exercises\"\nif exercises_path not in sys.path:\n    sys.path.append(exercises_path)\n\nfrom helpers import include_shiny_folder\n```\n\n# Getting started\n\n\n## Goals of Session 1\n\n1.  Understand the mechanics of a Shiny app (what to do, not why you do it)\n\n2.  Develop comfort with failure and debugging\n\n3.  You know where to go for help\n\n## Why Shiny?\n\nIntroduce the end state / whole game / bigger picture: web page with a server. \n\nThe server watches the web page and responds to user events on that page.\n\nWe need to tell the compute what to do when the user clicks.\n\n\n## How this session works\n\n-   This session is going to be exercise based\n-   All of the exercises and slides are running live on the [website](https://posit-conf-2024.github.io/intro-to-shiny-for-python/)\n-   You can do them on the website or open the apps in the `apps/core` folder\n-   If you need help, put a red sticker on your laptop; when you're done, put up a green sticker\n\n## Your turn\n\n{{< yourturn 'express-101-hello-world' >}}\n\n\n# Hello Shiny\n\n## What is a Shiny app?\n\n```{python}\n# | echo: false\n# | output: asis\n\ninclude_shiny_folder(\n    \"apps/000-penguins\", components=\"viewer\", viewer_height=700\n)\n```\n\n## Key features of Shiny\n\n-   Easy to develop\n-   Extensible\n-   Efficient\n\n## Why Shiny for Python?\n\nShiny is great because it lets you quickly create web apps without worrying about maintaining cache, managing state, and callbacks â€” or even HTML, CSS, and JavaScript.\n\n-   Shiny is designed to take you from prototype to production\n-   Easy enough to use for prototypes\n-   Efficient enough to handle complexity\n-   Everything you need to build production quality apps\n-   You don't need to throw away your Shiny apps\n\n# Anatomy of a Shiny App\n\n## You need three things\n\nTo make a Shiny app work you need to do three things:\n\n1.  Create a **UI section** that describes inputs and outputs\n\n    - Can contain text, plots, buttons, sliders, etc.\n\n2. Create a **server section**\n\n    - Contains your application logic\n    - In particular, it contains **rendering functions** that turn inputs into outputs\n\n3.  Link the server section and UI section\n\n    - by referring to the inputs in the server section\n\n\n## Inputs using shiny express\n\n```{.python filename=\"app.py\" code-line-numbers=\"3-4\"}\nfrom shiny.express import input, render, ui\n\n# UI section\nui.input_slider(id = \"n\", label = \"N\", min = 0, max = 100, value = 20)\n\n## Server section\n@render.text\ndef txt():\n    return f\"2 * n is {input.n() * 2}\"\n```\n\n<br />\n\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 150\n\nfrom shiny.express import input, render, ui\n\n# UI section\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n## Server section\n@render.text\ndef txt():\n    return f\"2 * n is {input.n() * 2}\"\n```\n\n## Server section using shiny express\n\n``` {.python filename=\"app.py\" code-line-numbers=\"6-9\"}\nfrom shiny.express import input, render, ui\n\n# UI section\nui.input_slider(id = \"n\", label = \"N\", min = 0, max = 100, value = 20)\n\n## Server section\n@render.text\ndef txt():\n    return f\"2 * n is {input.n() * 2}\"\n```\n\n<br />\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 150\n\nfrom shiny.express import input, render, ui\n\n# UI section\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n## Server section\n@render.text\ndef txt():\n    return f\"2 * n is {input.n() * 2}\"\n```\n\n## Refer to inputs\n\nYour render function can refer to the input by calling it like a function.\n\nIn this case, the `input_slider` has the name `\"n\"`, so you refer to it as `input.n()`.\n\n\n```{.python filename=\"app.py\" code-line-numbers=\"9\"}\nfrom shiny.express import input, render, ui\n\n# UI section\nui.input_slider(id = \"n\", label = \"N\", min = 0, max = 100, value = 20)\n\n## Server section\n@render.text\ndef txt():\n    return f\"2 * n is {input.n() * 2}\"\n```\n\n<br />\n\n```{shinylive-python}\n#| standalone: true\n#| viewerHeight: 150\n\nfrom shiny.express import input, render, ui\n\n# UI section\nui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n## Server section\n@render.text\ndef txt():\n    return f\"2 * n is {input.n() * 2}\"\n```\n\n## UI functions\n\n-   The `ui` submodule contains functions to create UI elements\n-   Inputs start with `ui.input_*()` and take an `id` and options\n-   Other functions like `ui.h1()` or `ui.p()` add static HTML to the app\n-   We'll get to layout functions in Session 3\n\n<https://shiny.posit.co/py/api/express/express.ui.input_select.html>\n\n## Inputs component gallery\n\n![](images/input-component-gallery.png)\n\n<https://shiny.posit.co/py/components/>\n\n\n## Render functions for outputs\n\nThe render functions define the outputs of the app.\n\n-   Outputs start with `render_*()` and usually just take an id\n\n<https://shiny.posit.co/py/api/express/express.render.plot.html>\n\n\n## Outputs component gallery\n\n![](images/output-component-gallery.png)\n\n<https://shiny.posit.co/py/components/>\n\n\n## Your turn\n\n{{< yourturn 'express-102-data-frame' >}}\n\n\n# Rendering functions on the server side\n\n## Server function\n\n-   Every Shiny app needs a `server` function\n-   The server function executes for each user session\n-   This function contains **rendering functions** which define how to turn inputs into outputs\n\n## Rendering functions\n\n``` python\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n```\n\n-   Functions are defined inside the main `server` function\n-   They need to be **decorated** with `@output` and `@render.*` in that order\n-   The function **name** should match the output id\n-   The return value is sent to the Shiny UI\n\n## Decorators are just functions\n\n``` python\n    @output\n    @render.plot(alt=\"A body mass plot of penguins\")\n    def mass_plot():\n        df = sample_data(penguins.copy(), input.sample())\n        df = df.loc[df[\"body_mass\"] < input.mass()]\n        return dist_plot(df)\n```\n\n-   Decorators are functions which take other functions\n-   Shiny uses them to identify reactive functions\n-   They can take arguments\n\n## Simple app example\n\n``` {.python code-line-numbers=\"5,10-13\"}\nfrom shiny import Inputs, Outputs, Session, App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 20),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\napp = App(app_ui, server)\n```\n\n## Common problems\n\n-   An output doesn't render\n-   An output doesn't update when an input changes\n-   There's some weird error\n\n## Your turn\n\n{{< yourturn 'express-103-debug' >}}\n\n\n# Making the link\n\n## Connecting inputs to outputs\n\n``` {.python code-line-numbers=\"5\"}\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n```\n\n-   Inputs are read by calling them like a function: `input.n()`, not `input.n`\n-   Referring to an input creates a reactive link between that input and the rendering function\n-   When the input changes, the rendering function will re-execute\n-   You can use multiple inputs in the same rendering function\n\n## Your turn\n\n{{< yourturn 'express-104-filter' >}}\n\n\n## Your turn\n\n{{< yourturn 'express-105-connect-filter' >}}\n\n\n## Your turn\n\n{{< yourturn 'express-106-debug' >}}\n\n\n## Your turn\n\n{{< yourturn 'express-107-debug' >}}\n\n\n# Recap\n\n## Summary\n\nMost Shiny app development consists of variations of these three things:\n\n1.  Add UI elements\n2.  Add rendering functions\n3.  Connect inputs and outputs\n\n## Your turn\n\n{{< yourturn 'express-108-plot' >}}\n\n"},"formats":{"positconfslides-revealjs":{"identifier":{"display-name":"RevealJS","target-format":"positconfslides-revealjs","base-format":"revealjs","extension-name":"positconfslides"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","filters":["shinylive","positconfslides","reveal-auto-agenda"],"incremental":false,"highlight-style":"a11y","css":["styles.css"],"output-file":"shiny-express-slides.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.5.55","auto-stretch":true,"theme":["../_extensions/kmasiello/positconfslides/custom.scss"],"revealjs-plugins":[],"title":"Getting started with Shiny express","title-slide-attributes":{"data-background-image":"images/shiny-for-python-seattle.jpg","data-background-position":"bottom left","data-background-size":"cover"},"chalkboard":true,"slideNumber":"c/t","code-copy":true,"center-title-slide":false,"width":"1600","height":"900","auto-agenda":{"heading":"Agenda"}}}},"projectFormats":["html"]}