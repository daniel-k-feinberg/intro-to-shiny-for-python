{"title":"UI Customization","markdown":{"yaml":{"title":"UI Customization","title-slide-attributes":{"data-background-image":"images/shiny-for-python-seattle.jpg","data-background-position":"bottom left","data-background-size":"cover"},"format":{"positconfslides-revealjs":{"incremental":false,"chalkboard":true,"slide-number":"c/t","code-copy":true,"center-title-slide":false,"code-link":true,"highlight-style":"a11y","width":"1600","height":"900","css":"styles.css","filters":["positconfslides","reveal-auto-agenda"],"auto-agenda":{"heading":"Agenda"}}}},"headingText":"| echo: false","containsRefs":false,"markdown":"\n\n```{python}\nimport os\nimport sys\nexercises_path = \"./exercises\"\nif exercises_path not in sys.path:\n    sys.path.append(exercises_path)\nfrom helpers import include_shiny_folder\n```\n\n# Introduction\n\n## Goals\n\n- So far we've learned:\n    - How to build an app\n    - How Shiny renders things\n- This session is all about how they look\n- We're going to cover a lot of UI elements quickly\n    - Just know that these exist\n    - Don't worry too much about remembering how they work\n\n## Why care about UI design?\n- It's what your stakeholders care about!\n- Good UI design simplifies your application code \n- Intuitive UIs mean fewer questions \n\n## Where we're headed\n\n{{< yourview '303-conditional-panel' >}}\n\n\n# Anatomy of Shiny UI\n\n## Anatomy of Shiny UI\n\n:::: {.columns}\n::: column\n```{.python}\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Hello Penguins!\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"mass\", \"Mass\"\n            ),\n            ui.input_action_button(\"reset\", \"Reset Slider\"),\n        ),\n        ui.panel_main(\n            ui.output_data_frame(\"table\"),\n        ),\n    ),\n)\n```\n:::\n::: column\n- The UI is separate from the server\n- UI is made up of pure functions\n    - You can break them into objects\n    - You can create them with functions\n- Opinionated\n    - Your inputs get labels\n    - Reasonable look and feel\n- Customizable \n    - Everything can be styled with CSS\n    - If you know JavaScript, you can use JavaScript\n:::\n::::\n\n## Some nomenclature\n\n- **Container functions**: organize **child** elements\n- **Element functions**: generate a UI object like input and outputs\n- **Child**: elements contained by a container function\n- **Parent**: the container one level up from a particular element or container\n\n## Element functions\n\n```{.python code-line-numbers=\"2,5,7,10\"}\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Hello Penguins!\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"mass\", \"Mass\"\n            ),\n            ui.input_action_button(\"reset\", \"Reset Slider\"),\n        ),\n        ui.panel_main(\n            ui.output_data_frame(\"table\"),\n        ),\n    ),\n)\n```\n\n## Container functions\n\n```{.python code-line-numbers=\"1,3,4,9\"}\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Hello Penguins!\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"mass\", \"Mass\"\n            ),\n            ui.input_action_button(\"reset\", \"Reset Slider\"),\n        ),\n        ui.panel_main(\n            ui.output_data_frame(\"table\"),\n        ),\n    ),\n)\n```\n\n\n## Container functions\n- Some layout functions take any child elements and lay them out in order\n    - `ui.page_fluid`\n    - `ui.panel_sidebar`\n    - `ui.panel_main`\n- Some, like `layout_sidebar`, take specific children\n    - `panel_sidebar` defines the sidebar\n    - `panel_main` defines the main panel\n\n# Navsets\n\n## Navsets\n- It's common to put apps in tabs\n- We have a `navset_tab` function which organizes `ui.nav` containers into tabs\n- `ui.nav` is itself a container and allows you lay out the things on the tab\n\n## Navsets\n::: {.nonincremental}\n- It's common to put apps in tabs\n- We have a set of `navset` functions which organize `ui.nav` containers in tabs\n- `ui.nav` is itself a container and allows you lay out the things on the tab\n:::\n```{.python}\nfrom shiny.express import ui\n\nwith ui.navset_tab():\n    with ui.nav_panel( \"Panel 1\"):\n        ui.input_slider(\"slider\", \"Slider\", 0, 100, 20)\n    with ui.nav_panel(\"Panel 2\"):\n        ui.input_action_button(\"button\", \"Button A\")\n    with ui.nav_panel(\"Panel 3\"):\n        ui.input_action_button(\"button2\", \"Button B\")\n```\n\n## Navset example\n\n```{python}\n# | echo: false\n# | output: asis\n\ninclude_shiny_folder(\n    \"apps/300-navsets\", components=\"viewer\", viewer_height=500\n)\n```\n\n\n## Your turn\n\n{{< yourturn 'express-306-navset' >}}\n\n\n# Cards\n\n## Cards\n- Cards are just small boxes which contain other elements\n- Useful for grouping inputs and outputs\n- \"Dashboards\" are just web apps in boxes\n- Called with `ui.card`\n- Cards can take `ui.card_header` and `ui.card_footer`\n\n## Cards\n\n```{.python code-line-numbers=\"4-8\"}\nimport shiny.experimental as x\n\napp_ui = ui.page_fluid(\n    ui.card(\n        ui.card_header(\"Slider card\"),\n        ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ui.output_text_verbatim(\"txt\"),\n    )\n)\n```\n\n## Cards example\n```{python}\n# | echo: false\n# | output: asis\n\ninclude_shiny_folder(\n    \"apps/301-cards\", components=\"viewer\", viewer_height=500\n)\n```\n\n\n## Your turn\n\nGo to [exercises/9-cards](./exercises/9-cards.html) or run `apps/core/exercises/4-ui-customization/4.2-cards` locally.\n\n# Rows and columns\n\n## Rows and columns\n- Sidebars, navsets and cards are all special purpose containers\n- What if you want to customize your layout more generally?\n- What about?\n    - Different screen sizes?\n    - Mobile browsers? \n    - Different zoom levels?\n    - Nested UI containers?\n- What we need is a responsive way to specify the size of things\n- Enter the bootstrap grid\n\n## Bootstap grid\n- Divide the screen into rows and columns \n- Row height expands to fit its children \n- Column width is relative to its parent \n\n## Bootstrap grid\n![](images/bootstrap_image.png)\n\n## Rows\n![](images/bootstrap_image.png)\n\n- The shiny `ui.row` container breaks your app into rows\n- Rows always contain `ui.column` \n\n## Columns \n![](images/bootstrap_image.png)\n\n- Imagine breaking up the parent container into 12 vertical sections\n- Each column gets an integer **width** from 1-12 \n- This defines how much of the parent the column occupies\n- Reacts to screen size\n- Why 12?\n\n## Rows and columns\n\n```{.python}\nui.row(\n        ui.column(\n            6,\n            ui.output_text(\"txt\"),\n        ),\n        ui.column(\n            6,\n            ui.output_plot(\"my_plot\"),\n            ),\n        ),\n    ),\n```\n\n# Composable functions\n\n## This is getting a bit complicated\n\n- UIs can start to get complicated\n- You can end up with deeply nested function calls\n- Too many brackets\n- Too many indents\n- Luckily You can break UIs into variables and compose them\n\n## UI functions are composable\n\n```{.python}\nimport shiny.experimental as x\n\nui.navset_tab(\n    ui.nav(\n        \"Tab1\",\n        ui.card(ui.output_plot(\"Plot\")),\n        ui.output_text(\"some_text\"),\n    ),\n    ui.nav(\"Tab2\", ui.output_data_frame(\"data\")),\n    ui.nav(\"Tab3\", ui.output_image(\"image\")),\n)\n```\n\n## UI functions are composable\n\n```{.python}\ncard1 = ui.card(ui.output_plot(\"Plot\"))\ntab1 = ui.nav(\n    \"Tab1\",\n    card1,\n    ui.output_text(\"some_text\"),\n)\ntab2 = ui.nav(\"Tab2\", ui.output_data_frame(\"data\"))\ntab3 = ui.nav(\"Tab3\", ui.output_image(\"image\"))\n\nui = ui.fluid_page(ui.navset_tab(tab1, tab2, tab3))\n```\n\n## Your turn\n\nGo to [exercises/10-layout](./exercises/10-layout.html) or run `apps/core/exercises/4-ui-customization/4.3-layout` locally.\n\n# Review\n\n## Review: Value boxes\n\n- Value boxes are another experimental layout container\n- Just like `ui.card()` \n- Called with `ui.value_box()`\n- Useful for visually highlighting important numbers or text\n- Usually contain `ui.output_text()` as a child element\n\n## Your turn\n\nGo to [exercises/11-value-boxes](./exercises/11-value-boxes.html) or run `apps/core/exercises/4-ui-customization/4.5-value-boxes` locally.\n\n## Dynamic user interfaces\n\n- Guide the user along a happy path\n- If you don't want them to click on something, don't show it to them\n- Much better to prevent errors than to handle them \n\n## Dynamic UI\n```{python}\n# | echo: false\n# | output: asis\n\ninclude_shiny_folder(\"./apps/302-dynamic-ui\", components=\"viewer\")\n```\n\n# Dynamic UI\n\n## Shiny Dynamic UI\n\n1) **`@render.ui`**: Generate UI elements on the server\n2) **`ui.conditional_panel`**: Hide things on the browser\n3) **`ui.update_*`**: Modify existing UI elements\n\n## Dynamic UI\n\n- UI elements can be generated like any other element\n- Use `@render.ui` on the server\n- Function returns any `ui` element\n- Referred to like a regular ui element\n\n## Dynamic UI\n\n```{.python code-line-numbers=\"5-6\"}\nfrom shiny.express import render, ui, input\n\nwith ui.card():\n    ui.input_checkbox(\"show_checkbox\", \"Show Checkbox\")\n    with ui.panel_conditional( \"input.show_checkbox\"):\n        ui.input_checkbox(\"show_slider\", \"Show Slider\"),\n    @render.ui\n    def dynamic_slider():\n        if input.show_slider():\n            return ui.input_slider(\"n\", \"N\", 0, 100, 20)\n```\n\n## Dynamic UI\n\n```{.python code-line-numbers=\"7-10\"}\nfrom shiny.express import render, ui, input\n\nwith ui.card():\n    ui.input_checkbox(\"show_checkbox\", \"Show Checkbox\")\n    with ui.panel_conditional( \"input.show_checkbox\"):\n        ui.input_checkbox(\"show_slider\", \"Show Slider\"),\n    @render.ui\n    def dynamic_slider():\n        if input.show_slider():\n            return ui.input_slider(\"n\", \"N\", 0, 100, 20)\n```\n\n## Dynamic UI\n\n- Dynamic UIs can be intimidating, but they follow a familiar pattern:\n    - Create a rendering function which returns a UI chunk\n    - Decorate the function with and `@render.ui`\n- Very powerful, but \n    - Round trip to the server\n    - You can lose session state\n\n## Dynamic UI\n```{python}\n# | echo: false\n# | output: asis\n\ninclude_shiny_folder(\"apps/302-dynamic-ui\", components=\"viewer\")\n```\n\n# Conditional panel\n\n## Conditional panel\n- `ui.panel_conditional` hides UI elements based on conditions\n- Less flexible than `ui.output_ui`\n- Preserves input state\n- Doesn't require trip to the server\n\n## Conditional panel\n\n```{python}\n# | echo: false\n# | output: asis\n\ninclude_shiny_folder(\"apps/302-dynamic-ui\", components=\"viewer\")\n```\n\n## Conditional panel\n\n```{.python code-line-numbers=\"3-6\"}\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"show_checkbox\", \"Show Checkbox\"),\n    ui.panel_conditional(\n        \"input.show_checkbox\",\n        ui.input_checkbox(\"show_slider\", \"Show Slider\"),\n    ),\n    ui.output_ui(\"dynamic_slider\"),\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.ui\n    def dynamic_slider():\n        print(input.show_slider())\n        if input.show_slider():\n            return ui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\napp = App(app_ui, server)\n```\n\n## Things to note\n- Uses JavaScript condition, not python\n- JavaScript condition will be the same as R, Google and chatGPT can help\n- You often want `===` \n\n## Your turn\n\nGo to [exercises/12-layout](./exercises/12-layout.html) or run problems `4.6` and `4.7` in `apps/core/exercises/4-ui-customization/`.\n\n\n# Conclusion\n\n## That's a lot of stuff!\n\n- Shiny gives you a lot of power to customize your app\n- Important to remember _that_ you can do these things, even if you forget _how_\n- Learning to build intuitive UIs is a journey\n- Ask for advice on Discord\n","srcMarkdownNoYaml":"\n\n```{python}\n# | echo: false\nimport os\nimport sys\nexercises_path = \"./exercises\"\nif exercises_path not in sys.path:\n    sys.path.append(exercises_path)\nfrom helpers import include_shiny_folder\n```\n\n# Introduction\n\n## Goals\n\n- So far we've learned:\n    - How to build an app\n    - How Shiny renders things\n- This session is all about how they look\n- We're going to cover a lot of UI elements quickly\n    - Just know that these exist\n    - Don't worry too much about remembering how they work\n\n## Why care about UI design?\n- It's what your stakeholders care about!\n- Good UI design simplifies your application code \n- Intuitive UIs mean fewer questions \n\n## Where we're headed\n\n{{< yourview '303-conditional-panel' >}}\n\n\n# Anatomy of Shiny UI\n\n## Anatomy of Shiny UI\n\n:::: {.columns}\n::: column\n```{.python}\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Hello Penguins!\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"mass\", \"Mass\"\n            ),\n            ui.input_action_button(\"reset\", \"Reset Slider\"),\n        ),\n        ui.panel_main(\n            ui.output_data_frame(\"table\"),\n        ),\n    ),\n)\n```\n:::\n::: column\n- The UI is separate from the server\n- UI is made up of pure functions\n    - You can break them into objects\n    - You can create them with functions\n- Opinionated\n    - Your inputs get labels\n    - Reasonable look and feel\n- Customizable \n    - Everything can be styled with CSS\n    - If you know JavaScript, you can use JavaScript\n:::\n::::\n\n## Some nomenclature\n\n- **Container functions**: organize **child** elements\n- **Element functions**: generate a UI object like input and outputs\n- **Child**: elements contained by a container function\n- **Parent**: the container one level up from a particular element or container\n\n## Element functions\n\n```{.python code-line-numbers=\"2,5,7,10\"}\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Hello Penguins!\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"mass\", \"Mass\"\n            ),\n            ui.input_action_button(\"reset\", \"Reset Slider\"),\n        ),\n        ui.panel_main(\n            ui.output_data_frame(\"table\"),\n        ),\n    ),\n)\n```\n\n## Container functions\n\n```{.python code-line-numbers=\"1,3,4,9\"}\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Hello Penguins!\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"mass\", \"Mass\"\n            ),\n            ui.input_action_button(\"reset\", \"Reset Slider\"),\n        ),\n        ui.panel_main(\n            ui.output_data_frame(\"table\"),\n        ),\n    ),\n)\n```\n\n\n## Container functions\n- Some layout functions take any child elements and lay them out in order\n    - `ui.page_fluid`\n    - `ui.panel_sidebar`\n    - `ui.panel_main`\n- Some, like `layout_sidebar`, take specific children\n    - `panel_sidebar` defines the sidebar\n    - `panel_main` defines the main panel\n\n# Navsets\n\n## Navsets\n- It's common to put apps in tabs\n- We have a `navset_tab` function which organizes `ui.nav` containers into tabs\n- `ui.nav` is itself a container and allows you lay out the things on the tab\n\n## Navsets\n::: {.nonincremental}\n- It's common to put apps in tabs\n- We have a set of `navset` functions which organize `ui.nav` containers in tabs\n- `ui.nav` is itself a container and allows you lay out the things on the tab\n:::\n```{.python}\nfrom shiny.express import ui\n\nwith ui.navset_tab():\n    with ui.nav_panel( \"Panel 1\"):\n        ui.input_slider(\"slider\", \"Slider\", 0, 100, 20)\n    with ui.nav_panel(\"Panel 2\"):\n        ui.input_action_button(\"button\", \"Button A\")\n    with ui.nav_panel(\"Panel 3\"):\n        ui.input_action_button(\"button2\", \"Button B\")\n```\n\n## Navset example\n\n```{python}\n# | echo: false\n# | output: asis\n\ninclude_shiny_folder(\n    \"apps/300-navsets\", components=\"viewer\", viewer_height=500\n)\n```\n\n\n## Your turn\n\n{{< yourturn 'express-306-navset' >}}\n\n\n# Cards\n\n## Cards\n- Cards are just small boxes which contain other elements\n- Useful for grouping inputs and outputs\n- \"Dashboards\" are just web apps in boxes\n- Called with `ui.card`\n- Cards can take `ui.card_header` and `ui.card_footer`\n\n## Cards\n\n```{.python code-line-numbers=\"4-8\"}\nimport shiny.experimental as x\n\napp_ui = ui.page_fluid(\n    ui.card(\n        ui.card_header(\"Slider card\"),\n        ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ui.output_text_verbatim(\"txt\"),\n    )\n)\n```\n\n## Cards example\n```{python}\n# | echo: false\n# | output: asis\n\ninclude_shiny_folder(\n    \"apps/301-cards\", components=\"viewer\", viewer_height=500\n)\n```\n\n\n## Your turn\n\nGo to [exercises/9-cards](./exercises/9-cards.html) or run `apps/core/exercises/4-ui-customization/4.2-cards` locally.\n\n# Rows and columns\n\n## Rows and columns\n- Sidebars, navsets and cards are all special purpose containers\n- What if you want to customize your layout more generally?\n- What about?\n    - Different screen sizes?\n    - Mobile browsers? \n    - Different zoom levels?\n    - Nested UI containers?\n- What we need is a responsive way to specify the size of things\n- Enter the bootstrap grid\n\n## Bootstap grid\n- Divide the screen into rows and columns \n- Row height expands to fit its children \n- Column width is relative to its parent \n\n## Bootstrap grid\n![](images/bootstrap_image.png)\n\n## Rows\n![](images/bootstrap_image.png)\n\n- The shiny `ui.row` container breaks your app into rows\n- Rows always contain `ui.column` \n\n## Columns \n![](images/bootstrap_image.png)\n\n- Imagine breaking up the parent container into 12 vertical sections\n- Each column gets an integer **width** from 1-12 \n- This defines how much of the parent the column occupies\n- Reacts to screen size\n- Why 12?\n\n## Rows and columns\n\n```{.python}\nui.row(\n        ui.column(\n            6,\n            ui.output_text(\"txt\"),\n        ),\n        ui.column(\n            6,\n            ui.output_plot(\"my_plot\"),\n            ),\n        ),\n    ),\n```\n\n# Composable functions\n\n## This is getting a bit complicated\n\n- UIs can start to get complicated\n- You can end up with deeply nested function calls\n- Too many brackets\n- Too many indents\n- Luckily You can break UIs into variables and compose them\n\n## UI functions are composable\n\n```{.python}\nimport shiny.experimental as x\n\nui.navset_tab(\n    ui.nav(\n        \"Tab1\",\n        ui.card(ui.output_plot(\"Plot\")),\n        ui.output_text(\"some_text\"),\n    ),\n    ui.nav(\"Tab2\", ui.output_data_frame(\"data\")),\n    ui.nav(\"Tab3\", ui.output_image(\"image\")),\n)\n```\n\n## UI functions are composable\n\n```{.python}\ncard1 = ui.card(ui.output_plot(\"Plot\"))\ntab1 = ui.nav(\n    \"Tab1\",\n    card1,\n    ui.output_text(\"some_text\"),\n)\ntab2 = ui.nav(\"Tab2\", ui.output_data_frame(\"data\"))\ntab3 = ui.nav(\"Tab3\", ui.output_image(\"image\"))\n\nui = ui.fluid_page(ui.navset_tab(tab1, tab2, tab3))\n```\n\n## Your turn\n\nGo to [exercises/10-layout](./exercises/10-layout.html) or run `apps/core/exercises/4-ui-customization/4.3-layout` locally.\n\n# Review\n\n## Review: Value boxes\n\n- Value boxes are another experimental layout container\n- Just like `ui.card()` \n- Called with `ui.value_box()`\n- Useful for visually highlighting important numbers or text\n- Usually contain `ui.output_text()` as a child element\n\n## Your turn\n\nGo to [exercises/11-value-boxes](./exercises/11-value-boxes.html) or run `apps/core/exercises/4-ui-customization/4.5-value-boxes` locally.\n\n## Dynamic user interfaces\n\n- Guide the user along a happy path\n- If you don't want them to click on something, don't show it to them\n- Much better to prevent errors than to handle them \n\n## Dynamic UI\n```{python}\n# | echo: false\n# | output: asis\n\ninclude_shiny_folder(\"./apps/302-dynamic-ui\", components=\"viewer\")\n```\n\n# Dynamic UI\n\n## Shiny Dynamic UI\n\n1) **`@render.ui`**: Generate UI elements on the server\n2) **`ui.conditional_panel`**: Hide things on the browser\n3) **`ui.update_*`**: Modify existing UI elements\n\n## Dynamic UI\n\n- UI elements can be generated like any other element\n- Use `@render.ui` on the server\n- Function returns any `ui` element\n- Referred to like a regular ui element\n\n## Dynamic UI\n\n```{.python code-line-numbers=\"5-6\"}\nfrom shiny.express import render, ui, input\n\nwith ui.card():\n    ui.input_checkbox(\"show_checkbox\", \"Show Checkbox\")\n    with ui.panel_conditional( \"input.show_checkbox\"):\n        ui.input_checkbox(\"show_slider\", \"Show Slider\"),\n    @render.ui\n    def dynamic_slider():\n        if input.show_slider():\n            return ui.input_slider(\"n\", \"N\", 0, 100, 20)\n```\n\n## Dynamic UI\n\n```{.python code-line-numbers=\"7-10\"}\nfrom shiny.express import render, ui, input\n\nwith ui.card():\n    ui.input_checkbox(\"show_checkbox\", \"Show Checkbox\")\n    with ui.panel_conditional( \"input.show_checkbox\"):\n        ui.input_checkbox(\"show_slider\", \"Show Slider\"),\n    @render.ui\n    def dynamic_slider():\n        if input.show_slider():\n            return ui.input_slider(\"n\", \"N\", 0, 100, 20)\n```\n\n## Dynamic UI\n\n- Dynamic UIs can be intimidating, but they follow a familiar pattern:\n    - Create a rendering function which returns a UI chunk\n    - Decorate the function with and `@render.ui`\n- Very powerful, but \n    - Round trip to the server\n    - You can lose session state\n\n## Dynamic UI\n```{python}\n# | echo: false\n# | output: asis\n\ninclude_shiny_folder(\"apps/302-dynamic-ui\", components=\"viewer\")\n```\n\n# Conditional panel\n\n## Conditional panel\n- `ui.panel_conditional` hides UI elements based on conditions\n- Less flexible than `ui.output_ui`\n- Preserves input state\n- Doesn't require trip to the server\n\n## Conditional panel\n\n```{python}\n# | echo: false\n# | output: asis\n\ninclude_shiny_folder(\"apps/302-dynamic-ui\", components=\"viewer\")\n```\n\n## Conditional panel\n\n```{.python code-line-numbers=\"3-6\"}\napp_ui = ui.page_fluid(\n    ui.input_checkbox(\"show_checkbox\", \"Show Checkbox\"),\n    ui.panel_conditional(\n        \"input.show_checkbox\",\n        ui.input_checkbox(\"show_slider\", \"Show Slider\"),\n    ),\n    ui.output_ui(\"dynamic_slider\"),\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.ui\n    def dynamic_slider():\n        print(input.show_slider())\n        if input.show_slider():\n            return ui.input_slider(\"n\", \"N\", 0, 100, 20)\n\n\napp = App(app_ui, server)\n```\n\n## Things to note\n- Uses JavaScript condition, not python\n- JavaScript condition will be the same as R, Google and chatGPT can help\n- You often want `===` \n\n## Your turn\n\nGo to [exercises/12-layout](./exercises/12-layout.html) or run problems `4.6` and `4.7` in `apps/core/exercises/4-ui-customization/`.\n\n\n# Conclusion\n\n## That's a lot of stuff!\n\n- Shiny gives you a lot of power to customize your app\n- Important to remember _that_ you can do these things, even if you forget _how_\n- Learning to build intuitive UIs is a journey\n- Ask for advice on Discord\n"},"formats":{"positconfslides-revealjs":{"identifier":{"display-name":"RevealJS","target-format":"positconfslides-revealjs","base-format":"revealjs","extension-name":"positconfslides"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","filters":["shinylive","positconfslides","reveal-auto-agenda"],"incremental":false,"highlight-style":"a11y","css":["styles.css"],"output-file":"ui-customization-slides.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.5.55","auto-stretch":true,"theme":["../_extensions/kmasiello/positconfslides/custom.scss"],"revealjs-plugins":[],"title":"UI Customization","title-slide-attributes":{"data-background-image":"images/shiny-for-python-seattle.jpg","data-background-position":"bottom left","data-background-size":"cover"},"chalkboard":true,"slideNumber":"c/t","code-copy":true,"center-title-slide":false,"width":"1600","height":"900","auto-agenda":{"heading":"Agenda"}}}},"projectFormats":["html"]}