{"title":"Workflow best practices","markdown":{"yaml":{"title":"Workflow best practices","title-slide-attributes":{"data-background-image":"images/shiny-for-python-seattle.jpg","data-background-position":"bottom left","data-background-size":"cover"},"format":{"positconfslides-revealjs":{"incremental":false,"chalkboard":true,"slide-number":"c/t","code-copy":true,"center-title-slide":false,"code-link":true,"highlight-style":"a11y","width":"1600","height":"900","css":"styles.css","filters":["positconfslides","reveal-auto-agenda"],"auto-agenda":{"heading":"Agenda"}}}},"headingText":"| echo: false","containsRefs":false,"markdown":"\n```{python}\nimport os\nimport sys\nexercises_path = \"./exercises\"\nif exercises_path not in sys.path:\n    sys.path.append(exercises_path)\nfrom helpers import include_shiny_folder\n```\n\n# Introduction\n\n## Goals\n\n- Learn some Shiny best practices\n- Get a sense of how large complicated apps are structured\n- Know when you need to refactor your application\n\n# Refactoring\n\n## Avoid premature refactoring\n\n- Start by just getting your app to work\n- Take small steps to avoid repetition\n- Ultimately you're the one who needs to work with the code\n\n## When should you refactor?\n- You're trying to hold too much in your head\n- Changing the app is difficult\n- Other people don't understand your code\n- You don't understand your code!\n\n## Three main techniques\n- Use functions to generate UI\n- Separate reactive and non-reactive code\n- Modules\n\n## We're only going to cover two\n::: {.nonincremental}\n- Use functions to generate UI\n- Separate reactive and non-reactive code\n- ~~Modules~~\n:::\n\n# UI Functions\n\n## Background on functions\n\n- In Python, functions are the best way to improve code quality\n    - Don't Repeat Yourself (DRY) principle\n    - Can define variables within the function scope\n    - Can write tests against them\n    - Easy to use in list comprehensions\n- If your code is getting crazy, start refactoring into functions\n\n## Data Science blind spot\n<br><br>\n\n:::{.large}\nData scientists forget funcitons when writing Shiny UIs\n:::\n\n## UI elements are just values\n\n- Recall that Shiny UI elements are just values\n    - They can be saved as variables\n    - They can be stored in lists\n    - They can be passed into functions \n    - They can be returned by functions\n\n## Using functions\n\n```{.python}\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n1\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n2\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n3\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n4\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n5\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n6\", \"N\", 0, 100, 20),\n)\n\napp = App(app_ui, None)\n```\n\n## Using functions\n\n```{.python}\nfrom shiny import App, render, ui\n\ndef my_slider(id, label):\n    return ui.input_slider(id, \"N\", 0, 100, 20)\n\napp_ui = ui.page_fluid(\n    my_slider(\"n1\"),\n    my_slider(\"n2\"),\n    my_slider(\"n3\"),\n    my_slider(\"n4\"),\n    my_slider(\"n5\"),\n)\n\napp = App(app_ui, None)\n```\n\n## Applying a function over a list\n\n```{.python}\nfrom shiny import App, render, ui\n\ndef my_slider(id):\n    return ui.input_slider(id, \"N\", 0, 100, 20)\n\nids = [\"n1\", \"n2\", \"n3\", \"n4\", \"n5\"]\n\napp_ui = ui.page_fluid(\n    [my_slider(x) for x in ids]\n)\n\napp = App(app_ui, None)\n```\n\n## Iterating across two lists\n\n```{.python}\nfrom shiny import App, render, ui\n\ndef my_slider(id, label):\n    return ui.input_slider(id, label + \"Number\", 0, 100, 20)\n\nnumbers = [\"n1\", \"n2\", \"n3\", \"n4\", \"n5\", \"n6\"]\nlabels = [\"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth\", \"Sixth\"]\n\napp_ui = ui.page_fluid(\n    [my_slider(x, y) for x, y in zip(numbers, labels)]\n)\n\napp = App(app_ui, None)\n```\n<!-- \n## Benefits of functions\n- Defines the the logic in one place\n- First step on the abstraction ladder\n- Clarifies how components interact with each other\n -->\n\n## Your turn\n\n{{< yourturn 'express-401-col-width' >}}\n\n## Your turn\n\n{{< yourturn 'express-402-iterators' >}}\n\n\n## Separate Reactive and Non-reactive logic\n\n- Most Shiny app code is non-reactive\n    - Drawing plots\n    - Summarizing data\n    - Interacting with databases\n    - (Really, everything except the actual reading of reactive inputs and calcs)\n- It's fine to include this code inside reactive functions\n- As your app grows you should separate them\n\n## Reactivity makes everything harder\n\n- Reactive context makes them inherently more difficult\n    - Harder to debug\n    - Harder to test\n    - Harder to document\n    - Harder to reason about\n\n## Pull logic out of the reactive context\n- Non-reactive functions are familliar and predictable\n- You can call them in a notebook\n- You can write unit tests \n- Makes your reactive code much clearer\n- You can reuse them in other contexts\n\n## Your turn\n\n{{< yourturn 'express-403-extract-function' >}}\n\n\n\n# Modules\n\n## Modules\n\n- Not going to teach them, but you should know about them\n- Used when you want to encapsulate _both_ UI _and_ server logic together\n- Allows you to package and re-use parts of your application\n- Great for working with teams of developers\n- Essential for large applications\n\n# Question and Answer\n\n## Any questions?\n\n# Conclusion\n\n## Thank you!\n\nAlso, please fill out the survey:  \n[https://pos.it/conf-workshop-survey](https://pos.it/conf-workshop-survey)","srcMarkdownNoYaml":"\n```{python}\n# | echo: false\nimport os\nimport sys\nexercises_path = \"./exercises\"\nif exercises_path not in sys.path:\n    sys.path.append(exercises_path)\nfrom helpers import include_shiny_folder\n```\n\n# Introduction\n\n## Goals\n\n- Learn some Shiny best practices\n- Get a sense of how large complicated apps are structured\n- Know when you need to refactor your application\n\n# Refactoring\n\n## Avoid premature refactoring\n\n- Start by just getting your app to work\n- Take small steps to avoid repetition\n- Ultimately you're the one who needs to work with the code\n\n## When should you refactor?\n- You're trying to hold too much in your head\n- Changing the app is difficult\n- Other people don't understand your code\n- You don't understand your code!\n\n## Three main techniques\n- Use functions to generate UI\n- Separate reactive and non-reactive code\n- Modules\n\n## We're only going to cover two\n::: {.nonincremental}\n- Use functions to generate UI\n- Separate reactive and non-reactive code\n- ~~Modules~~\n:::\n\n# UI Functions\n\n## Background on functions\n\n- In Python, functions are the best way to improve code quality\n    - Don't Repeat Yourself (DRY) principle\n    - Can define variables within the function scope\n    - Can write tests against them\n    - Easy to use in list comprehensions\n- If your code is getting crazy, start refactoring into functions\n\n## Data Science blind spot\n<br><br>\n\n:::{.large}\nData scientists forget funcitons when writing Shiny UIs\n:::\n\n## UI elements are just values\n\n- Recall that Shiny UI elements are just values\n    - They can be saved as variables\n    - They can be stored in lists\n    - They can be passed into functions \n    - They can be returned by functions\n\n## Using functions\n\n```{.python}\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n1\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n2\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n3\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n4\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n5\", \"N\", 0, 100, 20),\n    ui.input_slider(\"n6\", \"N\", 0, 100, 20),\n)\n\napp = App(app_ui, None)\n```\n\n## Using functions\n\n```{.python}\nfrom shiny import App, render, ui\n\ndef my_slider(id, label):\n    return ui.input_slider(id, \"N\", 0, 100, 20)\n\napp_ui = ui.page_fluid(\n    my_slider(\"n1\"),\n    my_slider(\"n2\"),\n    my_slider(\"n3\"),\n    my_slider(\"n4\"),\n    my_slider(\"n5\"),\n)\n\napp = App(app_ui, None)\n```\n\n## Applying a function over a list\n\n```{.python}\nfrom shiny import App, render, ui\n\ndef my_slider(id):\n    return ui.input_slider(id, \"N\", 0, 100, 20)\n\nids = [\"n1\", \"n2\", \"n3\", \"n4\", \"n5\"]\n\napp_ui = ui.page_fluid(\n    [my_slider(x) for x in ids]\n)\n\napp = App(app_ui, None)\n```\n\n## Iterating across two lists\n\n```{.python}\nfrom shiny import App, render, ui\n\ndef my_slider(id, label):\n    return ui.input_slider(id, label + \"Number\", 0, 100, 20)\n\nnumbers = [\"n1\", \"n2\", \"n3\", \"n4\", \"n5\", \"n6\"]\nlabels = [\"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth\", \"Sixth\"]\n\napp_ui = ui.page_fluid(\n    [my_slider(x, y) for x, y in zip(numbers, labels)]\n)\n\napp = App(app_ui, None)\n```\n<!-- \n## Benefits of functions\n- Defines the the logic in one place\n- First step on the abstraction ladder\n- Clarifies how components interact with each other\n -->\n\n## Your turn\n\n{{< yourturn 'express-401-col-width' >}}\n\n## Your turn\n\n{{< yourturn 'express-402-iterators' >}}\n\n\n## Separate Reactive and Non-reactive logic\n\n- Most Shiny app code is non-reactive\n    - Drawing plots\n    - Summarizing data\n    - Interacting with databases\n    - (Really, everything except the actual reading of reactive inputs and calcs)\n- It's fine to include this code inside reactive functions\n- As your app grows you should separate them\n\n## Reactivity makes everything harder\n\n- Reactive context makes them inherently more difficult\n    - Harder to debug\n    - Harder to test\n    - Harder to document\n    - Harder to reason about\n\n## Pull logic out of the reactive context\n- Non-reactive functions are familliar and predictable\n- You can call them in a notebook\n- You can write unit tests \n- Makes your reactive code much clearer\n- You can reuse them in other contexts\n\n## Your turn\n\n{{< yourturn 'express-403-extract-function' >}}\n\n\n\n# Modules\n\n## Modules\n\n- Not going to teach them, but you should know about them\n- Used when you want to encapsulate _both_ UI _and_ server logic together\n- Allows you to package and re-use parts of your application\n- Great for working with teams of developers\n- Essential for large applications\n\n# Question and Answer\n\n## Any questions?\n\n# Conclusion\n\n## Thank you!\n\nAlso, please fill out the survey:  \n[https://pos.it/conf-workshop-survey](https://pos.it/conf-workshop-survey)"},"formats":{"positconfslides-revealjs":{"identifier":{"display-name":"RevealJS","target-format":"positconfslides-revealjs","base-format":"revealjs","extension-name":"positconfslides"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","filters":["shinylive","positconfslides","reveal-auto-agenda"],"incremental":false,"highlight-style":"a11y","css":["styles.css"],"output-file":"best-practices-slides.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.5.55","auto-stretch":true,"theme":["../_extensions/kmasiello/positconfslides/custom.scss"],"revealjs-plugins":[],"title":"Workflow best practices","title-slide-attributes":{"data-background-image":"images/shiny-for-python-seattle.jpg","data-background-position":"bottom left","data-background-size":"cover"},"chalkboard":true,"slideNumber":"c/t","code-copy":true,"center-title-slide":false,"width":"1600","height":"900","auto-agenda":{"heading":"Agenda"}}}},"projectFormats":["html"]}