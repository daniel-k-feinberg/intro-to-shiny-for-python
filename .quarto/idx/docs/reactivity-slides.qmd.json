{"title":"Reactivity","markdown":{"yaml":{"title":"Reactivity","title-slide-attributes":{"data-background-image":"images/shiny-for-python-seattle.jpg","data-background-position":"bottom left","data-background-size":"cover"},"format":{"positconfslides-revealjs":{"incremental":false,"chalkboard":true,"slide-number":"c/t","code-copy":true,"center-title-slide":false,"highlight-style":"a11y","width":"1600","height":"900","css":"styles.css","filters":["positconfslides","reveal-auto-agenda"],"auto-agenda":{"heading":"Agenda"},"mermaid-format":"svg"}}},"headingText":"| echo: false","containsRefs":false,"markdown":"\n\n```{python}\nimport os\nimport sys\nexercises_path = \"./exercises\"\nif exercises_path not in sys.path:\n    sys.path.append(exercises_path)\nfrom helpers import include_shiny_folder, multiple_choice_app, Quiz\n```\n\n# Reactivity overview\n\n\n## How did Shiny do that?\n\n```{python}\n# | echo: false\n# | output: asis\ninclude_shiny_folder(\n    \"./exercises/express-108-plot/problem\",\n    file_name=\"app-solution.py\",\n    exclusions=[\"app.py\"],\n    components=\"viewer\",\n    viewer_height=700,\n)\n```\n\n## How did Shiny do that?\n\n- We told Shiny _what_ to do\n- We didn't tell Shiny _when_ to do it\n\n## How do other frameworks work?\n\n- Streamlit\n\n  - Re-render everything everywhere all the time\n\n- Dash / Panel / Gradio\n\n  - Define callback functions\n\n## Event driven programming\n\n- You have to do it\n- Easy to get wrong\n- Hard to tell when you get it wrong\n\n## What's a better way?\n\n::: {.v-center-container}\n- Infer the relationships between components \n- Build a computation graph\n:::\n\n## Does that really work?\n\n- You're not wrong to find this suspicious\n- \"Does Shiny infer relationships by analyzing the source code?\" \n  - No\n  - Many ways that would break down!\n- For this to work, the inference has to be 100% reliable\n\n## It really works\n\n- We have 10 years of real-world experience with this form of reactivity\n- The underlying mechanism is simple, reliable, and intuitive\n- Not static analysis, but rather, runtime tracing\n- Originally inspired by Meteor.js\n\n## Outputs and recipes\n\n\n```{.python code-line-numbers=\"5,12\"}\nfrom shiny import Inputs, Outputs, Session, App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 20),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\n\napp = App(app_ui, server)\n```\n\n## Recipes and inputs\n\n```{.python code-line-numbers=\"4,13\"}\nfrom shiny import Inputs, Outputs, Session, App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 20),\n    ui.output_text_verbatim(\"txt\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\n\napp = App(app_ui, server)\n```\n\n\n## Reactive graph\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n```{mermaid}\nflowchart TD\n  S[Slider] --> R{Recipe}\n  R --> Sc((Text))\n```\n:::\n\n::: {.column width=\"50%\"}\n```{mermaid}\nflowchart TD\n  S[Slider] --> Sc((Text))\n```\n:::\n\n::::\n\n\n\n\n## Declarative programming\n\n- Tell Shiny how each output should be filled\n- Trust that the framework will keep everything up-to-date\n- You're setting the menu, not doing the cooking\n\n## Event-driven programming\n\n![](images/carmy-yelling.webp){fig-align=\"center\"}\n\n## Reactive programming\n\n![](images/carmy-whites.png){fig-align=\"center\"}\n\n# Your turn\n\n## Your turn\n\nDraw the graph of this application:\n\n```{python}\n# | echo: false\n# | output: asis\ninclude_shiny_folder(\n    \"./apps/200-penguins\",\n    file_name=\"app.py\",\n    components=\"viewer\",\n    viewer_height=700,\n)\n```\n\n# Solution\n\n## Solution: Initial state\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n    Sl[Slider]  --> Sc \n  Sl --> M((Dist Plot))\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Solution: Calculate scatter plot\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n    Sl[Slider]  --> Sc \n  Sl --> M((Dist Plot))\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n  classDef changed fill:#f96\n```\n\n## Solution: Calculate scatter plot\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n    Sl[Slider]  --> Sc \n  Sl --> M((Dist Plot))\n  linkStyle 2 display:none\n  classDef changed fill:#f96\n```\n\n## Solution: Calculate distribution\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n    Sl[Slider]  --> Sc \n  Sl --> M((Dist Plot)):::changed\n  linkStyle 2 display:none\n  classDef changed fill:#f96\n```\n\n## Solution: Calculate distribution\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n    Sl[Slider]  --> Sc \n  Sl --> M((Dist Plot)):::changed\n  classDef changed fill:#f96\n```\n\n\n## Solution: Reactive graph\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n    Sl[Slider]  --> Sc \n  Sl --> M((Dist Plot))\n```\n\n\n## Solution: Slider changes\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n  Sl[Slider]:::changed --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Invalidated\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider]:::changed --> Sc \n  Sl --> M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Forget dependencies\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Solution: Recalculate\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Solution: Recalculate\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n```\n\n\n## Solution: Recalculate\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n```\n\n## Solution: Recalculate\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Updated\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Checkbox changes\n```{mermaid}\nflowchart TD\n  C[Checkbox]:::changed --> Sc((Scatter\\nPlot))\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Invalidated\n\n```{mermaid}\nflowchart TD\n  C[Checkbox]:::changed --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Forget dependencies\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n```\n\n## Solution: Recalculate\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n```\n\n## Solution: Recalculate\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Updated\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n```\n\n\n# Reactive calculations\n\n## Reactivity scales\n\n- Every Shiny app uses this pattern\n- Works for dynamic UIs\n- Shiny is lazy \n\n## Saving and reusing calculated values\n\n- So far we've been working with shallow reactive graphs\n- Each input is passed to a rendering function which produces an output\n- Input -> Recipe -> Output can produce repetitive, inefficient applications\n- `@reactive.calc` creates calculations whose results can be used by one _or more_ outputs\n- This adds intermediate nodes to the reactive graph\n\n## Reactive Calc example\n\n```{python}\n# | echo: false\n# | output: asis\ninclude_shiny_folder(\n  \"apps/200-simple-reactive-calc\",\n  viewer_height=700,\n)\n```\n\n## Identify repetition\n```{.python code-line-numbers=\"4,5,11,12\"}\n    @output\n    @render.table\n    def df():\n        rand = np.random.rand(input.n_rows(), 1)\n        df = pd.DataFrame(rand, columns=[\"col_1\"])\n        return df\n\n    @output\n    @render.plot\n    def hist():\n        rand = np.random.rand(input.n_rows(), 1)\n        df = pd.DataFrame(rand, columns=[\"col_1\"])\n        plot = (\n            ggplot(df, aes(x=\"col_1\"))\n            + geom_histogram(binwidth=0.1, fill=\"blue\", color=\"black\")\n            + labs(x=\"Random Values\", y=\"Frequency\", title=\"Histogram of Random Data\")\n        )\n        return plot\n```\n\n## Problems with repetition\n\n1) Code is in multiple places\n2) The app is taking the sample twice\n3) The table and graph are not using the same sample!\n\n## Reactive Calculation to the rescue\n```{.python code-line-numbers=\"1-4,9,15\"}\n    @reactive.calc\n    def sampled_df():\n        rand = np.random.rand(input.n_rows(), 1)\n        df = pd.DataFrame(rand, columns=[\"col_1\"])\n\n    @output\n    @render.table\n    def df():\n        return sampled_df()\n\n    @output\n    @render.plot\n    def hist():\n        plot = (\n            ggplot(sampled_df(), aes(x=\"col_1\"))\n            + geom_histogram(binwidth=0.1, fill=\"blue\", color=\"black\")\n            + labs(x=\"Random Values\", y=\"Frequency\", title=\"Histogram of Random Data\")\n        )\n        return plot\n```\n\n## Reactive calculations\n- Defined with the `@reactive.calc` decorator\n- Called like other inputs\n- Can read inputs, reactive values, or other reactive calculations\n- Caches its value, so it's cheap to call repeatedly\n- Adds a node to the reactive graph\n  - Discards cached value when upstream nodes invalidate\n  - Notifies downstream nodes when it invalidates\n\n## Initial state\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Calculate table\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Calculate table\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 2 display:none\n```\n\n## Calculate sample\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]:::changed\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 2 display:none\n```\n\n## Calculate sample\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]:::changed\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n```\n\n## Calculate plot\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]:::changed\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n```\n\n## Calculate plot\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]:::changed\n  \n  classDef changed fill:#f96\n```\n\n## Deep reactive graph\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n```\n\n## Slider changes\n\n```{mermaid}\nflowchart TD\n  Sl[Slider]:::changed --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n```\n\n## Invalidated\n```{mermaid}\nflowchart TD\n  Sl[Slider]:::changed --> S[Sample]:::changed\n  S --> T[Table]\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n```\n\n## Invalidated\n```{mermaid}\nflowchart TD\n  Sl[Slider]:::changed --> S[Sample]:::changed\n  S --> T[Table]:::changed\n  S --> P[Plot]:::changed\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Recalculate table\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Recalculate table\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 2 display:none\n```\n\n## Recalculate sample\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]:::changed\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 2 display:none\n```\n\n## Recalculate sample\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]:::changed\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n```\n\n## Recalculate plot\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]:::changed\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n```\n\n## Recalculate plot\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]:::changed\n  \n  classDef changed fill:#f96\n```\n\n## Updated\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]\n  classDef changed fill:#f96\n```\n\n# Your turn\n\n## Your turn\n\n{{< yourturn 'express-209-reactive-effect' >}}\n\n\n## Exercise 2.3 answer \n\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S[Sample] --> F[Filter]\n  F --> T((Table))\n  S --> P((Plot))\n  F --> Tx((Text))\n  classDef changed fill:#f96\n```\n\n# Overriding reactivity\n\n## Overriding reactivity\n\n- By default, when an input changes, any outputs that use it will recalculate\n- This isn't always the user interaction you want\n    - Database queries\n    - Expensive modeling\n    - Grouping multiple filters together\n    - Side effects\n- Use `reactive.event` to explicitly specify what should trigger recalculation for an output or calc\n\n## Example\n\n```{python}\n# | echo: false\n# | output: asis\ninclude_shiny_folder(\n    \"apps/202-reactive-event\",\n    file_name=\"app.py\",\n    # exclusions=[\"app.py\"],\n    components=\"viewer\",\n    viewer_height=700,\n)\n```\n\n## reactive.event\n\n```{.python}\nfrom shiny.express import ui, render, input\nfrom shiny import reactive\n\nui.input_text(\"input_txt\", \"Enter text\")\nui.input_action_button(\"send\", \"Enter\")\n@render.text\n@reactive.event(input.send)\ndef output_txt():\n    return input.input_txt()\n\n\n\n```\n\n- `@reactive.event` overrides the usual _implicit_ dependency detection with an _explicit_ trigger\n- It can be applied to rendering functions or to `@reactive.calc`\n- It tells Shiny to invalidate the object whenever or more inputs change\n- `@reactive.event` is often used with action buttons or action links\n\n## Your turn\n\n{{< yourturn 'express-208-reactive-event' 'true' >}}\n\n\n# Side effects\n\n## What we've learned\n\n- How Shiny re-renders elements \n- How Shiny detects dependencies between elements (inputs and outputs)\n- How to create reusable calculations with `@reactive.calc`\n- How to explicitly control reactivity with `@reactive.event`\n\n## Is that enough?\n\n- Shiny has a function `ui.show_modal` which triggers a modal window. \n- Using what you know so far, how would you call this function?\n\n```{python}\n# | echo: false\n# | output: asis\ninclude_shiny_folder(\n    \"apps/201-modal\",\n    components=\"viewer\",\n    viewer_height=400,\n)\n```\n\n\n\n## Return values vs. side effects\n\n- Inputs, outputs, and calculations all produce values\n- When an input value changes, downstream calculations and outputs might need to have their values updated as well\n- But sometimes we want to execute some code that doesn't produce a value\n  - Doesn't fit in the categories of \"calculation\" or \"output\"\n\n## Reactive Effects\n\n- The `@reactive.effect` decorator allows you to react to an input without returning a value\n- Usually paired with `@reactive.event` \n\n``` {.python}\n@reactive.effect\n@reactive.event(input.show)\ndef toggle_modal():\n    m = ui.modal(\n        \"This is a somewhat important message.\",\n        title=\"Click outside the modal to close\",\n        easy_close=True,\n        footer=None,\n    )\n    ui.modal_show(m)\n```\n\n## The rule\n\n* Code that produces an output: `@output` + `@render.*`\n* Code that produces an intermediate value: `@reactive.calc`\n* **Code that produces only side effects: `@reactive.effect`**\n\n. . .\n\n::: nonincremental\n* Code that produces a value _and_ a side effect: _Don't do this!_\n  * The \"command-query separation\" principle\n:::\n\n## What's a side effect?\n```{python}\n# | echo: false\n# | output: asis\n\nquestions = Quiz(\n    {\n        \"Writing a CSV\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"side effect\",\n        },\n        \"Querying a database\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"value\",\n        },\n        \"Adding two numbers\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"value\",\n        },\n        \"A function which prints to the console\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"side effect\",\n        },\n        \"Fetching the current temperature from an API\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"value\",\n        },\n        \"A function which sorts a list in place\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"side effect\",\n        },\n        \"Getting a model score for a set of inputs\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"value\",\n        },\n        \"Deploying a model to a hosting service\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"side effect\",\n        },\n    }\n)\nmultiple_choice_app(questions)\n```\n\n## What's a side effect?\n\n- Somewhat context dependent\n- Multiple strategies can work\n- If your solution feels complicated and painful, ask whether you should use the other strategy\n\n## Your turn\n\n{{< yourturn 'express-201-reactive-calc' >}}\n\n","srcMarkdownNoYaml":"\n\n```{python}\n# | echo: false\nimport os\nimport sys\nexercises_path = \"./exercises\"\nif exercises_path not in sys.path:\n    sys.path.append(exercises_path)\nfrom helpers import include_shiny_folder, multiple_choice_app, Quiz\n```\n\n# Reactivity overview\n\n\n## How did Shiny do that?\n\n```{python}\n# | echo: false\n# | output: asis\ninclude_shiny_folder(\n    \"./exercises/express-108-plot/problem\",\n    file_name=\"app-solution.py\",\n    exclusions=[\"app.py\"],\n    components=\"viewer\",\n    viewer_height=700,\n)\n```\n\n## How did Shiny do that?\n\n- We told Shiny _what_ to do\n- We didn't tell Shiny _when_ to do it\n\n## How do other frameworks work?\n\n- Streamlit\n\n  - Re-render everything everywhere all the time\n\n- Dash / Panel / Gradio\n\n  - Define callback functions\n\n## Event driven programming\n\n- You have to do it\n- Easy to get wrong\n- Hard to tell when you get it wrong\n\n## What's a better way?\n\n::: {.v-center-container}\n- Infer the relationships between components \n- Build a computation graph\n:::\n\n## Does that really work?\n\n- You're not wrong to find this suspicious\n- \"Does Shiny infer relationships by analyzing the source code?\" \n  - No\n  - Many ways that would break down!\n- For this to work, the inference has to be 100% reliable\n\n## It really works\n\n- We have 10 years of real-world experience with this form of reactivity\n- The underlying mechanism is simple, reliable, and intuitive\n- Not static analysis, but rather, runtime tracing\n- Originally inspired by Meteor.js\n\n## Outputs and recipes\n\n\n```{.python code-line-numbers=\"5,12\"}\nfrom shiny import Inputs, Outputs, Session, App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 20),\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\n\napp = App(app_ui, server)\n```\n\n## Recipes and inputs\n\n```{.python code-line-numbers=\"4,13\"}\nfrom shiny import Inputs, Outputs, Session, App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.input_slider(\"n\", \"N\", 0, 100, 20),\n    ui.output_text_verbatim(\"txt\"),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def txt():\n        return f\"n*2 is {input.n() * 2}\"\n\n\napp = App(app_ui, server)\n```\n\n\n## Reactive graph\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n```{mermaid}\nflowchart TD\n  S[Slider] --> R{Recipe}\n  R --> Sc((Text))\n```\n:::\n\n::: {.column width=\"50%\"}\n```{mermaid}\nflowchart TD\n  S[Slider] --> Sc((Text))\n```\n:::\n\n::::\n\n\n\n\n## Declarative programming\n\n- Tell Shiny how each output should be filled\n- Trust that the framework will keep everything up-to-date\n- You're setting the menu, not doing the cooking\n\n## Event-driven programming\n\n![](images/carmy-yelling.webp){fig-align=\"center\"}\n\n## Reactive programming\n\n![](images/carmy-whites.png){fig-align=\"center\"}\n\n# Your turn\n\n## Your turn\n\nDraw the graph of this application:\n\n```{python}\n# | echo: false\n# | output: asis\ninclude_shiny_folder(\n    \"./apps/200-penguins\",\n    file_name=\"app.py\",\n    components=\"viewer\",\n    viewer_height=700,\n)\n```\n\n# Solution\n\n## Solution: Initial state\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n    Sl[Slider]  --> Sc \n  Sl --> M((Dist Plot))\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Solution: Calculate scatter plot\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n    Sl[Slider]  --> Sc \n  Sl --> M((Dist Plot))\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n  classDef changed fill:#f96\n```\n\n## Solution: Calculate scatter plot\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n    Sl[Slider]  --> Sc \n  Sl --> M((Dist Plot))\n  linkStyle 2 display:none\n  classDef changed fill:#f96\n```\n\n## Solution: Calculate distribution\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n    Sl[Slider]  --> Sc \n  Sl --> M((Dist Plot)):::changed\n  linkStyle 2 display:none\n  classDef changed fill:#f96\n```\n\n## Solution: Calculate distribution\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n    Sl[Slider]  --> Sc \n  Sl --> M((Dist Plot)):::changed\n  classDef changed fill:#f96\n```\n\n\n## Solution: Reactive graph\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n    Sl[Slider]  --> Sc \n  Sl --> M((Dist Plot))\n```\n\n\n## Solution: Slider changes\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n  Sl[Slider]:::changed --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Invalidated\n\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider]:::changed --> Sc \n  Sl --> M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Forget dependencies\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Solution: Recalculate\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Solution: Recalculate\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n```\n\n\n## Solution: Recalculate\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n```\n\n## Solution: Recalculate\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot)):::changed\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Updated\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Checkbox changes\n```{mermaid}\nflowchart TD\n  C[Checkbox]:::changed --> Sc((Scatter\\nPlot))\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Invalidated\n\n```{mermaid}\nflowchart TD\n  C[Checkbox]:::changed --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Forget dependencies\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n```\n\n## Solution: Recalculate\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n```\n\n## Solution: Recalculate\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot)):::changed\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n```\n\n## Solution: Updated\n```{mermaid}\nflowchart TD\n  C[Checkbox] --> Sc((Scatter\\nPlot))\n  Sl[Slider] --> Sc \n  Sl --> M((Dist Plot))\n  \n  classDef changed fill:#f96\n```\n\n\n# Reactive calculations\n\n## Reactivity scales\n\n- Every Shiny app uses this pattern\n- Works for dynamic UIs\n- Shiny is lazy \n\n## Saving and reusing calculated values\n\n- So far we've been working with shallow reactive graphs\n- Each input is passed to a rendering function which produces an output\n- Input -> Recipe -> Output can produce repetitive, inefficient applications\n- `@reactive.calc` creates calculations whose results can be used by one _or more_ outputs\n- This adds intermediate nodes to the reactive graph\n\n## Reactive Calc example\n\n```{python}\n# | echo: false\n# | output: asis\ninclude_shiny_folder(\n  \"apps/200-simple-reactive-calc\",\n  viewer_height=700,\n)\n```\n\n## Identify repetition\n```{.python code-line-numbers=\"4,5,11,12\"}\n    @output\n    @render.table\n    def df():\n        rand = np.random.rand(input.n_rows(), 1)\n        df = pd.DataFrame(rand, columns=[\"col_1\"])\n        return df\n\n    @output\n    @render.plot\n    def hist():\n        rand = np.random.rand(input.n_rows(), 1)\n        df = pd.DataFrame(rand, columns=[\"col_1\"])\n        plot = (\n            ggplot(df, aes(x=\"col_1\"))\n            + geom_histogram(binwidth=0.1, fill=\"blue\", color=\"black\")\n            + labs(x=\"Random Values\", y=\"Frequency\", title=\"Histogram of Random Data\")\n        )\n        return plot\n```\n\n## Problems with repetition\n\n1) Code is in multiple places\n2) The app is taking the sample twice\n3) The table and graph are not using the same sample!\n\n## Reactive Calculation to the rescue\n```{.python code-line-numbers=\"1-4,9,15\"}\n    @reactive.calc\n    def sampled_df():\n        rand = np.random.rand(input.n_rows(), 1)\n        df = pd.DataFrame(rand, columns=[\"col_1\"])\n\n    @output\n    @render.table\n    def df():\n        return sampled_df()\n\n    @output\n    @render.plot\n    def hist():\n        plot = (\n            ggplot(sampled_df(), aes(x=\"col_1\"))\n            + geom_histogram(binwidth=0.1, fill=\"blue\", color=\"black\")\n            + labs(x=\"Random Values\", y=\"Frequency\", title=\"Histogram of Random Data\")\n        )\n        return plot\n```\n\n## Reactive calculations\n- Defined with the `@reactive.calc` decorator\n- Called like other inputs\n- Can read inputs, reactive values, or other reactive calculations\n- Caches its value, so it's cheap to call repeatedly\n- Adds a node to the reactive graph\n  - Discards cached value when upstream nodes invalidate\n  - Notifies downstream nodes when it invalidates\n\n## Initial state\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Calculate table\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Calculate table\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 2 display:none\n```\n\n## Calculate sample\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]:::changed\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 2 display:none\n```\n\n## Calculate sample\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]:::changed\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n```\n\n## Calculate plot\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]:::changed\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n```\n\n## Calculate plot\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]:::changed\n  \n  classDef changed fill:#f96\n```\n\n## Deep reactive graph\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n```\n\n## Slider changes\n\n```{mermaid}\nflowchart TD\n  Sl[Slider]:::changed --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n```\n\n## Invalidated\n```{mermaid}\nflowchart TD\n  Sl[Slider]:::changed --> S[Sample]:::changed\n  S --> T[Table]\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n```\n\n## Invalidated\n```{mermaid}\nflowchart TD\n  Sl[Slider]:::changed --> S[Sample]:::changed\n  S --> T[Table]:::changed\n  S --> P[Plot]:::changed\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Recalculate table\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 1 display:none\n  linkStyle 2 display:none\n```\n\n## Recalculate table\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 2 display:none\n```\n\n## Recalculate sample\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]:::changed\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 0 display:none\n  linkStyle 2 display:none\n```\n\n## Recalculate sample\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]:::changed\n  S --> T[Table]:::changed\n  S --> P[Plot]\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n```\n\n## Recalculate plot\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]:::changed\n  \n  classDef changed fill:#f96\n  linkStyle 2 display:none\n```\n\n## Recalculate plot\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]:::changed\n  \n  classDef changed fill:#f96\n```\n\n## Updated\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S --> T[Table]\n  S --> P[Plot]\n  classDef changed fill:#f96\n```\n\n# Your turn\n\n## Your turn\n\n{{< yourturn 'express-209-reactive-effect' >}}\n\n\n## Exercise 2.3 answer \n\n```{mermaid}\nflowchart TD\n  Sl[Slider] --> S[Sample]\n  S[Sample] --> F[Filter]\n  F --> T((Table))\n  S --> P((Plot))\n  F --> Tx((Text))\n  classDef changed fill:#f96\n```\n\n# Overriding reactivity\n\n## Overriding reactivity\n\n- By default, when an input changes, any outputs that use it will recalculate\n- This isn't always the user interaction you want\n    - Database queries\n    - Expensive modeling\n    - Grouping multiple filters together\n    - Side effects\n- Use `reactive.event` to explicitly specify what should trigger recalculation for an output or calc\n\n## Example\n\n```{python}\n# | echo: false\n# | output: asis\ninclude_shiny_folder(\n    \"apps/202-reactive-event\",\n    file_name=\"app.py\",\n    # exclusions=[\"app.py\"],\n    components=\"viewer\",\n    viewer_height=700,\n)\n```\n\n## reactive.event\n\n```{.python}\nfrom shiny.express import ui, render, input\nfrom shiny import reactive\n\nui.input_text(\"input_txt\", \"Enter text\")\nui.input_action_button(\"send\", \"Enter\")\n@render.text\n@reactive.event(input.send)\ndef output_txt():\n    return input.input_txt()\n\n\n\n```\n\n- `@reactive.event` overrides the usual _implicit_ dependency detection with an _explicit_ trigger\n- It can be applied to rendering functions or to `@reactive.calc`\n- It tells Shiny to invalidate the object whenever or more inputs change\n- `@reactive.event` is often used with action buttons or action links\n\n## Your turn\n\n{{< yourturn 'express-208-reactive-event' 'true' >}}\n\n\n# Side effects\n\n## What we've learned\n\n- How Shiny re-renders elements \n- How Shiny detects dependencies between elements (inputs and outputs)\n- How to create reusable calculations with `@reactive.calc`\n- How to explicitly control reactivity with `@reactive.event`\n\n## Is that enough?\n\n- Shiny has a function `ui.show_modal` which triggers a modal window. \n- Using what you know so far, how would you call this function?\n\n```{python}\n# | echo: false\n# | output: asis\ninclude_shiny_folder(\n    \"apps/201-modal\",\n    components=\"viewer\",\n    viewer_height=400,\n)\n```\n\n\n\n## Return values vs. side effects\n\n- Inputs, outputs, and calculations all produce values\n- When an input value changes, downstream calculations and outputs might need to have their values updated as well\n- But sometimes we want to execute some code that doesn't produce a value\n  - Doesn't fit in the categories of \"calculation\" or \"output\"\n\n## Reactive Effects\n\n- The `@reactive.effect` decorator allows you to react to an input without returning a value\n- Usually paired with `@reactive.event` \n\n``` {.python}\n@reactive.effect\n@reactive.event(input.show)\ndef toggle_modal():\n    m = ui.modal(\n        \"This is a somewhat important message.\",\n        title=\"Click outside the modal to close\",\n        easy_close=True,\n        footer=None,\n    )\n    ui.modal_show(m)\n```\n\n## The rule\n\n* Code that produces an output: `@output` + `@render.*`\n* Code that produces an intermediate value: `@reactive.calc`\n* **Code that produces only side effects: `@reactive.effect`**\n\n. . .\n\n::: nonincremental\n* Code that produces a value _and_ a side effect: _Don't do this!_\n  * The \"command-query separation\" principle\n:::\n\n## What's a side effect?\n```{python}\n# | echo: false\n# | output: asis\n\nquestions = Quiz(\n    {\n        \"Writing a CSV\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"side effect\",\n        },\n        \"Querying a database\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"value\",\n        },\n        \"Adding two numbers\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"value\",\n        },\n        \"A function which prints to the console\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"side effect\",\n        },\n        \"Fetching the current temperature from an API\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"value\",\n        },\n        \"A function which sorts a list in place\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"side effect\",\n        },\n        \"Getting a model score for a set of inputs\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"value\",\n        },\n        \"Deploying a model to a hosting service\": {\n            \"choices\": [\"value\", \"side effect\"],\n            \"answer\": \"side effect\",\n        },\n    }\n)\nmultiple_choice_app(questions)\n```\n\n## What's a side effect?\n\n- Somewhat context dependent\n- Multiple strategies can work\n- If your solution feels complicated and painful, ask whether you should use the other strategy\n\n## Your turn\n\n{{< yourturn 'express-201-reactive-calc' >}}\n\n"},"formats":{"positconfslides-revealjs":{"identifier":{"display-name":"RevealJS","target-format":"positconfslides-revealjs","base-format":"revealjs","extension-name":"positconfslides"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"mermaid-format":"svg","df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"shortcodes":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","filters":["shinylive","positconfslides","reveal-auto-agenda"],"incremental":false,"highlight-style":"a11y","css":["styles.css"],"output-file":"reactivity-slides.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.5.55","auto-stretch":true,"theme":["../_extensions/kmasiello/positconfslides/custom.scss"],"revealjs-plugins":[],"title":"Reactivity","title-slide-attributes":{"data-background-image":"images/shiny-for-python-seattle.jpg","data-background-position":"bottom left","data-background-size":"cover"},"chalkboard":true,"slideNumber":"c/t","code-copy":true,"center-title-slide":false,"width":"1600","height":"900","auto-agenda":{"heading":"Agenda"}}}},"projectFormats":["html"]}