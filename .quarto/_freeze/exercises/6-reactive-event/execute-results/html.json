{
  "hash": "4976e689acff3df853184757ef7fc3f6",
  "result": {
    "markdown": "---\ntitle: \"Reactive events\"\n---\n\n\n\n## Exercise 2.3\n\n## 2 Reactivity/2.3 Reactive Event\n::::: {.column-screen-inset}\n::: {.panel-tabset}\n## Goal\n\n::: {.callout-note collapse=\"false\"}\n## Exercise\nAdd an `input.action_button` to the app, and use `@reactive.event` to prevent the text from printing until the user presses the button.\n:::\n\n```{shinylive-python}\n#| standalone: true\n#| components: [viewer]\n#| layout: horizontal\n#| viewerHeight: 800\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"input_txt\", \"Enter text\"),\n    ui.input_action_button(\"send\", \"Enter\"),\n    ui.output_text_verbatim(\"output_txt\"),\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    @reactive.event(input.send)\n    def output_txt():\n        return input.input_txt()\n\n\napp = App(app_ui, server)\n\n```\n## Problem\n\n::: {.callout-note collapse=\"false\"}\n## Exercise\nAdd an `input.action_button` to the app, and use `@reactive.event` to prevent the text from printing until the user presses the button.\n:::\n\n```{shinylive-python}\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"input_txt\", \"Enter text\"),\n    ui.output_text_verbatim(\"output_txt\"),\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def output_txt():\n        return input.input_txt()\n\n\napp = App(app_ui, server)\n\n```\n## Solution\n\n::: {.callout-note collapse=\"false\"}\n## Exercise\nAdd an `input.action_button` to the app, and use `@reactive.event` to prevent the text from printing until the user presses the button.\n:::\n\n```{shinylive-python}\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: horizontal\n#| viewerHeight: 800\nfrom shiny import Inputs, Outputs, Session, App, reactive, render, req, ui\n\napp_ui = ui.page_fluid(\n    ui.input_text(\"input_txt\", \"Enter text\"),\n    ui.input_action_button(\"send\", \"Enter\"),\n    ui.output_text_verbatim(\"output_txt\"),\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    @reactive.event(input.send)\n    def output_txt():\n        return input.input_txt()\n\n\napp = App(app_ui, server)\n\n```\n## {{< bi github >}}\nThe source code for this exercise is [here](https://github.com/posit-conf-2024/intro-to-shiny-for-python/tree/main/apps/core/2-reactivity/2.3-reactive-event).\n:::\n:::::\n\n\n",
    "supporting": [
      "6-reactive-event_files"
    ],
    "filters": [],
    "includes": {}
  }
}